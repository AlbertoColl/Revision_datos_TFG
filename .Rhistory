library(tidyverse)
library(multcompView)
library(car)
library(rstatix)
library(gt)
library(patchwork)
#setwd("C:/Users/Usuario/Documents/GitHub/Revision_datos_TFG")
setwd("D:/collf/Documents/GitHub/Revision_datos_TFG")
#source(file = "./scripts septiembre 2024-2025/0_data_lab.R")
source(file = "./scripts septiembre 2024-2025/0_data_laptop.R")
source(file = "./scripts septiembre 2024-2025/1_funciones_graficas.R")
# Filtrar: solo anemonas cultivadas
data_2 <- filter(datos, cultivo == "cultured")
ggplot(data_2, aes(y = GPx_t)) +
geom_boxplot(aes(x = time:section, color = time:section), alpha = 0) +
geom_point(aes(x = time:section, color = time:section), alpha = 1, size = 2)
ggplot(data_2, aes(y = GPx_p)) +
geom_boxplot(aes(x = time:section, color = time:section), alpha = 0) +
geom_point(aes(x = time:section, color = time:section), alpha = 1, size = 2)
# Deteccion de outliers
view(data_2 %>%  group_by(section:time) %>%  identify_outliers(GPx_t))
# Deteccion de outliers
view(data_2 %>%  group_by(section:time) %>%  identify_outliers(GPx_p))
liminan:
data_2$SOD_t[7] <- NA #para normalidad
data_2$SOD_t[7] <- NA #para normalidad
data_2$SOD_t[3] <- NA #para normalidad
data_2$CAT_t[35] <- NA # La funcion ha identificado otro, pero su eliminacion no afecta a la normalidad de residuos, este si.
data_2$Mielo_p[26] <- NA
data_2$Mielo_t[18] <- NA #Sospechoso, y afecta a normalidad
data_2$Facida_p[30] # sospechoso, outlier no extremo
data_2$Fbasica_p[12] <- NA # outlier extremo
data_2$Fbasica_t[9] <- NA # Afecta a homocedasticidad
data_2$Lisozima_p[33] <- NA # outlier extremo
data_2$Lisozima_p[34] <- NA # outlier extremo
data_2$Lisozima_p[2] <- NA # outlier extremo
data_2$MDA_p[29] <- NA # Outlier no extremo pero parece que puede afectar al resultado del analisis y afecta a la varianza del grupo.
# Ajuste de modelos ANOVA con rstatix
modelos <- lapply(colnames(data_2[c(5:31)]), function(x){
anova_test(formula = as.formula(paste0(x, " ~ section * time")), data_2)})
(anova_results <- reduce(modelos, full_join) %>%
add_column(.before = 1, variable = rep(colnames(data_2[c(5:31)]), each = 3)) %>%
adjust_pvalue(method = "BH"))
# Test de Levene se computa exactamente igual
modelos_levene <- lapply(colnames(data_2[c(5:31)]), function(x){
levene_test(formula = as.formula(paste0(x, " ~ section * time")), data_2)})
(levene_results <- reduce(modelos_levene, full_join) %>%
add_column(.before = 1, variable = colnames(data_2[c(5:31)])))
modelos_lm <- lapply(colnames(data_2[c(5:31)]), function(x){
lm(formula = as.formula(paste0(x, " ~ section * time")), data_2)})
modelos_shapiro <- lapply(modelos_lm, function(x){
shapiro_test(residuals(x))})
(shapiro_results <- reduce(modelos_shapiro, full_join) %>%
add_column(.before = 1, parametro = colnames(data_2[c(5:31)])))
View(levene_results)
View(shapiro_results)
ggplot(data_2, aes(y = GPx_t)) +
geom_boxplot(aes(x = time:section, color = time:section), alpha = 0) +
geom_point(aes(x = time:section, color = time:section), alpha = 1, size = 2)
View(data_2)
data_2$GPx_t[9]
data_2$GPx_t[9] <- NA
# Ajuste de modelos ANOVA con rstatix
modelos <- lapply(colnames(data_2[c(5:31)]), function(x){
anova_test(formula = as.formula(paste0(x, " ~ section * time")), data_2)})
(anova_results <- reduce(modelos, full_join) %>%
add_column(.before = 1, variable = rep(colnames(data_2[c(5:31)]), each = 3)) %>%
adjust_pvalue(method = "BH"))
# Test de Levene se computa exactamente igual
modelos_levene <- lapply(colnames(data_2[c(5:31)]), function(x){
levene_test(formula = as.formula(paste0(x, " ~ section * time")), data_2)})
(levene_results <- reduce(modelos_levene, full_join) %>%
add_column(.before = 1, variable = colnames(data_2[c(5:31)])))
modelos_lm <- lapply(colnames(data_2[c(5:31)]), function(x){
lm(formula = as.formula(paste0(x, " ~ section * time")), data_2)})
modelos_shapiro <- lapply(modelos_lm, function(x){
shapiro_test(residuals(x))})
(shapiro_results <- reduce(modelos_shapiro, full_join) %>%
add_column(.before = 1, parametro = colnames(data_2[c(5:31)])))
View(levene_results)
modelos[6]
modelos[[6]
plot(modelos_lm[6])
modelos_lm[[6]
]
plot(modelos_lm[[6]])
data_2$GPx_t[6] <- NA #HOMOCEDASTICIDAD
data_2$GPx_t[8] <- NA #HOMOCEDASTICIDAD
# Test de Levene se computa exactamente igual
modelos_levene <- lapply(colnames(data_2[c(5:31)]), function(x){
levene_test(formula = as.formula(paste0(x, " ~ section * time")), data_2)})
(levene_results <- reduce(modelos_levene, full_join) %>%
add_column(.before = 1, variable = colnames(data_2[c(5:31)])))
modelos_lm <- lapply(colnames(data_2[c(5:31)]), function(x){
lm(formula = as.formula(paste0(x, " ~ section * time")), data_2)})
modelos_shapiro <- lapply(modelos_lm, function(x){
shapiro_test(residuals(x))})
(shapiro_results <- reduce(modelos_shapiro, full_join) %>%
add_column(.before = 1, parametro = colnames(data_2[c(5:31)])))
View(levene_results)
View(shapiro_results)
ggplot(data_2, aes(y = GPx_t)) +
geom_boxplot(aes(x = time:section, color = time:section), alpha = 0) +
geom_point(aes(x = time:section, color = time:section), alpha = 1, size = 2)
View(data_2)
# Ajuste de modelos ANOVA con rstatix
modelos <- lapply(colnames(data_2[c(5:31)]), function(x){
anova_test(formula = as.formula(paste0(x, " ~ section * time")), data_2)})
(anova_results <- reduce(modelos, full_join) %>%
add_column(.before = 1, variable = rep(colnames(data_2[c(5:31)]), each = 3)) %>%
adjust_pvalue(method = "BH"))
# Test de Levene se computa exactamente igual
modelos_levene <- lapply(colnames(data_2[c(5:31)]), function(x){
levene_test(formula = as.formula(paste0(x, " ~ section * time")), data_2)})
(levene_results <- reduce(modelos_levene, full_join) %>%
add_column(.before = 1, variable = colnames(data_2[c(5:31)])))
modelos_lm <- lapply(colnames(data_2[c(5:31)]), function(x){
lm(formula = as.formula(paste0(x, " ~ section * time")), data_2)})
modelos_shapiro <- lapply(modelos_lm, function(x){
shapiro_test(residuals(x))})
(shapiro_results <- reduce(modelos_shapiro, full_join) %>%
add_column(.before = 1, parametro = colnames(data_2[c(5:31)])))
View(anova_results)
data_2$GPx_t[33] <- NA#posible
# Ajuste de modelos ANOVA con rstatix
modelos <- lapply(colnames(data_2[c(5:31)]), function(x){
anova_test(formula = as.formula(paste0(x, " ~ section * time")), data_2)})
(anova_results <- reduce(modelos, full_join) %>%
add_column(.before = 1, variable = rep(colnames(data_2[c(5:31)]), each = 3)) %>%
adjust_pvalue(method = "BH"))
View(anova_results)
ggplot(data_2, aes(y = GPx_p)) +
geom_boxplot(aes(x = time:section, color = time:section), alpha = 0) +
geom_point(aes(x = time:section, color = time:section), alpha = 1, size = 2)
data_2$GPx_p[2]
data_2$GPx_p[2] <- NA
ggplot(data_2, aes(y = GPx_p)) +
geom_boxplot(aes(x = time:section, color = time:section), alpha = 0) +
geom_point(aes(x = time:section, color = time:section), alpha = 1, size = 2)
# Ajuste de modelos ANOVA con rstatix
modelos <- lapply(colnames(data_2[c(5:31)]), function(x){
anova_test(formula = as.formula(paste0(x, " ~ section * time")), data_2)})
(anova_results <- reduce(modelos, full_join) %>%
add_column(.before = 1, variable = rep(colnames(data_2[c(5:31)]), each = 3)) %>%
adjust_pvalue(method = "BH"))
# Test de Levene se computa exactamente igual
modelos_levene <- lapply(colnames(data_2[c(5:31)]), function(x){
levene_test(formula = as.formula(paste0(x, " ~ section * time")), data_2)})
(levene_results <- reduce(modelos_levene, full_join) %>%
add_column(.before = 1, variable = colnames(data_2[c(5:31)])))
modelos_lm <- lapply(colnames(data_2[c(5:31)]), function(x){
lm(formula = as.formula(paste0(x, " ~ section * time")), data_2)})
modelos_shapiro <- lapply(modelos_lm, function(x){
shapiro_test(residuals(x))})
(shapiro_results <- reduce(modelos_shapiro, full_join) %>%
add_column(.before = 1, parametro = colnames(data_2[c(5:31)])))
View(levene_results)
View(shapiro_results)
View(anova_results)
