modelos <- lapply(colnames(data_2[c(5:31)]), function(x){
anova_test(formula = as.formula(paste0(x, " ~ corte * tiempo")), data_2)})
(anova_results <- reduce(modelos, full_join) %>%
add_column(.before = 1, variable = rep(colnames(data_2[c(5:31)]), each = 3)) %>%
adjust_pvalue(method = "BH"))
# Test de Levenese computa exactamente igual
modelos_levene <- lapply(colnames(data_2[c(5:31)]), function(x){
levene_test(formula = as.formula(paste0(x, " ~ corte * tiempo")), data_2)})
(levene_results <- reduce(modelos_levene, full_join) %>%
add_column(.before = 1, variable = colnames(data_2[c(5:31)])))
modelos_lm <- lapply(colnames(data_2[c(5:31)]), function(x){
lm(formula = as.formula(paste0(x, " ~ corte * tiempo")), data_2)})
modelos_shapiro <- lapply(modelos_lm, function(x){
shapiro_test(residuals(x))})
(shapiro_results <- reduce(modelos_shapiro, full_join) %>%
add_column(.before = 1, parametro = colnames(data_2[c(5:31)])))
View(modelos_shapiro)
View(shapiro_results)
8.967316e-02
ggplot(data_2, aes(Lisozima_p)) +
geom_boxplot(aes(x = tiempo:corte, color = tiempo:corte), alpha = 0) +
geom_point(aes(x = tiempo:corte, color = tiempo:corte), alpha = 1, size = 2)
ggplot(data_2, aes(y = Mielo_t)) +
geom_boxplot(aes(x = tiempo:corte, color = tiempo:corte), alpha = 0) +
geom_point(aes(x = tiempo:corte, color = tiempo:corte), alpha = 1, size = 2)
ggplot(data_2, aes(y = Lisozima_p)) +
geom_boxplot(aes(x = tiempo:corte, color = tiempo:corte), alpha = 0) +
geom_point(aes(x = tiempo:corte, color = tiempo:corte), alpha = 1, size = 2)
# Deteccion de outliers en SOD_t y CAT_t para normalidad de residuos
view(data_2 %>%
group_by(corte:tiempo) %>%
identify_outliers(Lisozima_p))
data_2$Lisozima_p[33] <- NA # outlier extremo
data_2$Lisozima_p[34] <- NA # outlier extremo
ggplot(data_2, aes(y = Lisozima_p)) +
geom_boxplot(aes(x = tiempo:corte, color = tiempo:corte), alpha = 0) +
geom_point(aes(x = tiempo:corte, color = tiempo:corte), alpha = 1, size = 2)
data_2$Lisozima_p[2] <- NA # outlier extremo
# Ajuste de modelos ANOVA con rstatix
modelos <- lapply(colnames(data_2[c(5:31)]), function(x){
anova_test(formula = as.formula(paste0(x, " ~ corte * tiempo")), data_2)})
(anova_results <- reduce(modelos, full_join) %>%
add_column(.before = 1, variable = rep(colnames(data_2[c(5:31)]), each = 3)) %>%
adjust_pvalue(method = "BH"))
# Test de Levenese computa exactamente igual
modelos_levene <- lapply(colnames(data_2[c(5:31)]), function(x){
levene_test(formula = as.formula(paste0(x, " ~ corte * tiempo")), data_2)})
(levene_results <- reduce(modelos_levene, full_join) %>%
add_column(.before = 1, variable = colnames(data_2[c(5:31)])))
modelos_lm <- lapply(colnames(data_2[c(5:31)]), function(x){
lm(formula = as.formula(paste0(x, " ~ corte * tiempo")), data_2)})
modelos_shapiro <- lapply(modelos_lm, function(x){
shapiro_test(residuals(x))})
(shapiro_results <- reduce(modelos_shapiro, full_join) %>%
add_column(.before = 1, parametro = colnames(data_2[c(5:31)])))
View(shapiro_results)
ggplot(data_2, aes(y = CAT_t)) +
geom_boxplot(aes(x = tiempo:corte, color = tiempo:corte), alpha = 0) +
geom_point(aes(x = tiempo:corte, color = tiempo:corte), alpha = 1, size = 2)
# Deteccion de outliers en SOD_t y CAT_t para normalidad de residuos
view(data_2 %>%
group_by(corte:tiempo) %>%
identify_outliers(CAT_t))
View(anova_results)
81/3
for (n in c(1:27)) {
i <- colnames(data_2[5:31])[[n]]
tabla_summ <- data_2 %>% group_by(corte:tiempo) %>%
get_summary_stats(i, type = "mean_se")
if (any(filter(as.tibble(anova_results), variable == i)$p.adj <= 0.05, na.rm = T)){
model <- aov(as.formula(paste0(i, " ~ corte * tiempo")), data_2)
tukey_loop <- TukeyHSD(model)
cld.tukey <- multcompLetters4(model, tukey_loop, reversed = T)
(letras <- rownames_to_column(as.data.frame(cld.tukey$`corte:tiempo`$Letters)))
colnames(letras) <- c("corte:tiempo", "tukey")
tabla_summ <- merge(tabla_summ, letras)
} else {if (n != 5){
tabla_summ$tukey <- c("", "", "", "")}
}
tabla_summ <- tabla_summ %>% separate_wider_delim(`corte:tiempo`, ":", names = c("tratamiento", "tiempo"), cols_remove=F)
if (n != 5){
(p <- barras_tfg() + labs(subtitle = case_when(str_detect(i, "_p") == T  ~ "Column",
str_detect(i, "_t") == T ~ "Tentacle",
TRUE ~ "")))
ggsave(paste0("./resultados/graficas2025/", i, ".png"), width = 90, height = 112.5, units = "mm", dpi = 1000)}
}
data_2c <- filter(datos, cultivo == "cultured", playa == "Calahonda")
ggplot(data_2c, aes(y = G6PDH_p)) +
geom_boxplot(aes(x = tiempo:corte, color = tiempo:corte), alpha = 0) +
geom_point(aes(x = tiempo:corte, color = tiempo:corte), alpha = 1, size = 2)
ggplot(data_2, aes(y = Fbasica_p)) +
geom_boxplot(aes(x = tiempo:corte, color = tiempo:corte), alpha = 0) +
geom_point(aes(x = tiempo:corte, color = tiempo:corte), alpha = 1, size = 2)
modelos_c <- lapply(colnames(data_2c[c(5:31)]), function(x){
anova_test(formula = as.formula(paste0(x, " ~ corte * tiempo")), data_2c)})
(anova_results_c <- reduce(modelos, full_join) %>%
add_column(.before = 1, variable = rep(colnames(data_2c[c(5:31)]), each = 3)) %>%
adjust_pvalue(method = "BH"))
View(anova_results_c)
# Test de Levene se computa exactamente igual
modelos_levene_c <- lapply(colnames(data_2c[c(5:31)]), function(x){
levene_test(formula = as.formula(paste0(x, " ~ corte * tiempo")), data_2c)})
(levene_results_c <- reduce(modelos_levene, full_join) %>%
add_column(.before = 1, variable = colnames(data_2c[c(5:31)])))
modelos_c <- lapply(colnames(data_2c[c(5:31)]), function(x){
anova_test(formula = as.formula(paste0(x, " ~ corte * tiempo")), data_2c)})
(anova_results_c <- reduce(modelos_c, full_join) %>%
add_column(.before = 1, variable = rep(colnames(data_2c[c(5:31)]), each = 3)) %>%
adjust_pvalue(method = "BH"))
modelos_c <- lapply(colnames(data_2c[c(5:31)]), function(x){
anova_test(formula = as.formula(paste0(x, " ~ corte * tiempo")), data_2c)})
View(data_2c)
data_2c <- data_2c %>%   select(-GPx_t, -GPx_p)
modelos_c <- lapply(colnames(data_2c[c(5:29)]), function(x){
anova_test(formula = as.formula(paste0(x, " ~ corte * tiempo")), data_2c)})
(anova_results_c <- reduce(modelos_c, full_join) %>%
add_column(.before = 1, variable = rep(colnames(data_2c[c(5:29)]), each = 3)) %>%
adjust_pvalue(method = "BH"))
# Test de Levene se computa exactamente igual
modelos_levene_c <- lapply(colnames(data_2c[c(5:29)]), function(x){
levene_test(formula = as.formula(paste0(x, " ~ corte * tiempo")), data_2c)})
(levene_results_c <- reduce(modelos_levene_c, full_join) %>%
add_column(.before = 1, variable = colnames(data_2c[c(5:29)])))
modelos_lm <- lapply(colnames(data_2c[c(5:29)]), function(x){
lm(formula = as.formula(paste0(x, " ~ corte * tiempo")), data_2c)})
modelos_shapiro <- lapply(modelos_lm, function(x){
shapiro_test(residuals(x))})
(shapiro_results <- reduce(modelos_shapiro_c, full_join) %>%
add_column(.before = 1, parametro = colnames(data_2[c(5:29)])))
modelos_lm_c <- lapply(colnames(data_2c[c(5:29)]), function(x){
lm(formula = as.formula(paste0(x, " ~ corte * tiempo")), data_2c)})
modelos_shapiro_c <- lapply(modelos_lm_c, function(x){
shapiro_test(residuals(x))})
(shapiro_results_c <- reduce(modelos_shapiro_c, full_join) %>%
add_column(.before = 1, parametro = colnames(data_2[c(5:29)])))
View(levene_results_c)
View(modelos_shapiro_c)
View(shapiro_results_c)
ggplot(data_2c, aes(y = CAT_t)) +
geom_boxplot(aes(x = tiempo:corte, color = tiempo:corte), alpha = 0) +
geom_point(aes(x = tiempo:corte, color = tiempo:corte), alpha = 1, size = 2)
View(anova_results_c)
data_2a <- filter(datos, cultivo == "cultured", playa == "Calahonda")
View(data_2)
data_2a <- filter(datos, cultivo == "cultured", playa == "Almuñecar")
View(data_2a)
ggplot(data_2a, aes(y = CAT_t)) +
geom_boxplot(aes(x = tiempo:corte, color = tiempo:corte), alpha = 0) +
geom_point(aes(x = tiempo:corte, color = tiempo:corte), alpha = 1, size = 2)
data_2c <- data_2c %>%   select(-GPx_t, -GPx_p)
data_2a <- data_2a %>%   select(-GPx_t, -GPx_p)
modelos_a <- lapply(colnames(data_2a[c(5:29)]), function(x){
anova_test(formula = as.formula(paste0(x, " ~ corte * tiempo")), data_2a)})
(anova_results_a <- reduce(modelos_a, full_join) %>%
add_column(.before = 1, variable = rep(colnames(data_2a[c(5:29)]), each = 3)) %>%
adjust_pvalue(method = "BH"))
# Test de Levene se computa exactamente igual
modelos_levene_a <- lapply(colnames(data_2a[c(5:29)]), function(x){
levene_test(formula = as.formula(paste0(x, " ~ corte * tiempo")), data_2a)})
(levene_results_a <- reduce(modelos_levene_a, full_join) %>%
add_column(.before = 1, variable = colnames(data_2a[c(5:29)])))
modelos_lm_a <- lapply(colnames(data_2a[c(5:29)]), function(x){
lm(formula = as.formula(paste0(x, " ~ corte * tiempo")), data_2a)})
modelos_shapiro_a <- lapply(modelos_lm_a, function(x){
shapiro_test(residuals(x))})
(shapiro_results_a <- reduce(modelos_shapiro_a, full_join) %>%
add_column(.before = 1, parametro = colnames(data_2a[c(5:29)])))
View(levene_results_a)
View(shapiro_results_a)
View(anova_results_a)
data_2s <- filter(datos, cultivo == "cultured", playa == "Salobreña")
ggplot(data_2s, aes(y = CAT_t)) +
geom_boxplot(aes(x = tiempo:corte, color = tiempo:corte), alpha = 0) +
geom_point(aes(x = tiempo:corte, color = tiempo:corte), alpha = 1, size = 2)
View(data_2s)
data_2s <- data_2s %>%   select(-GPx_t, -GPx_p)
modelos_s <- lapply(colnames(data_2s[c(5:29)]), function(x){
anova_test(formula = as.formula(paste0(x, " ~ corte * tiempo")), data_2s)})
(anova_results_s <- reduce(modelos_s, full_join) %>%
add_column(.before = 1, variable = rep(colnames(data_2s[c(5:29)]), each = 3)) %>%
adjust_pvalue(method = "BH"))
# Test de Levene se computa exactamente igual
modelos_levene_s <- lapply(colnames(data_2s[c(5:29)]), function(x){
levene_test(formula = as.formula(paste0(x, " ~ corte * tiempo")), data_2s)})
(levene_results_s <- reduce(modelos_levene_s, full_join) %>%
add_column(.before = 1, variable = colnames(data_2s[c(5:29)])))
modelos_lm_s <- lapply(colnames(data_2s[c(5:29)]), function(x){
lm(formula = as.formula(paste0(x, " ~ corte * tiempo")), data_2s)})
modelos_shapiro_s <- lapply(modelos_lm_s, function(x){
shapiro_test(residuals(x))})
(shapiro_results_s <- reduce(modelos_shapiro_s, full_join) %>%
add_column(.before = 1, parametro = colnames(data_2s[c(5:29)])))
View(levene_results_s)
View(shapiro_results_s)
View(anova_results_s)
# En laboratorio
setwd("C:/Users/Usuario/Documents/GitHub/Revision_datos_TFG") # Lab
source(file = "./scripts septiembre 2024-2025/0_data_lab.R")
source(file = "./scripts septiembre 2024-2025/1_funciones_graficas.R")
# En laboratorio
setwd("C:/Users/Usuario/Documents/GitHub/Revision_datos_TFG") # Lab
source(file = "./scripts septiembre 2024-2025/0_data_lab.R")
source(file = "./scripts septiembre 2024-2025/1_funciones_graficas.R")
View(datos)
# Filtrar: solo anemonas cultivadas
data_1 <- filter(datos, corte != "dissected", tiempo != 1)
View(data_1)
# Filtrar: solo anemonas cultivadas
data_1 <- filter(datos, corte != "dissected", tiempo != 1)
ggplot(data_1, aes(y = SOD_t)) +
geom_boxplot(aes(x = cultivo:playa, color = cultivo:playa), alpha = 0) +
geom_point(aes(x = cultivo:playa, color = cultivo:playa), alpha = 1, size = 2)
ggplot(data_1, aes(y = SOD_t)) +
geom_boxplot(aes(x = cultivo:playa, color = playa), alpha = 0) +
geom_point(aes(x = cultivo:playa, color = cultivo:playa), alpha = 1, size = 2)
ggplot(data_1, aes(y = SOD_t)) +
geom_boxplot(aes(x = cultivo:playa, color = playa), alpha = 0) +
geom_point(aes(x = cultivo:playa, color = cultivo:playa), alpha = 1, size = 2)
ggplot(data_1, aes(y = SOD_t)) +
geom_boxplot(aes(x = cultivo:playa, color = cultivo:playa), alpha = 0) +
geom_point(aes(x = cultivo:playa, color = cultivo:playa), alpha = 1, size = 2)
ggplot(data_1, aes(y = SOD_t)) +
geom_boxplot(aes(x = playa, color = playa), alpha = 0) +
geom_point(aes(x = playa, color =playa), alpha = 1, size = 2) +
facet_wrap(~cultivo)
# Deteccion de outliers en SOD_t y CAT_t para normalidad de residuos
view(data_1 %>%
group_by(cultivo:playa) %>%
identify_outliers(CAT_t))
ggplot(data_1, aes(y = SOD_p)) +
geom_boxplot(aes(x = playa, color = playa), alpha = 0) +
geom_point(aes(x = playa, color =playa), alpha = 1, size = 2) +
facet_wrap(~cultivo)
ggplot(data_1, aes(y = CAT_t)) +
geom_boxplot(aes(x = playa, color = playa), alpha = 0) +
geom_point(aes(x = playa, color =playa), alpha = 1, size = 2) +
facet_wrap(~cultivo)
ggplot(data_1, aes(y = CAT_p)) +
geom_boxplot(aes(x = playa, color = playa), alpha = 0) +
geom_point(aes(x = playa, color =playa), alpha = 1, size = 2) +
facet_wrap(~cultivo)
ggplot(data_1, aes(y = TEAC_t)) +
geom_boxplot(aes(x = playa, color = playa), alpha = 0) +
geom_point(aes(x = playa, color =playa), alpha = 1, size = 2) +
facet_wrap(~cultivo)
ggplot(data_1, aes(y = TEAC_p)) +
geom_boxplot(aes(x = playa, color = playa), alpha = 0) +
geom_point(aes(x = playa, color =playa), alpha = 1, size = 2) +
facet_wrap(~cultivo)
ggplot(data_1, aes(y = MDA_t)) +
geom_boxplot(aes(x = playa, color = playa), alpha = 0) +
geom_point(aes(x = playa, color =playa), alpha = 1, size = 2) +
facet_wrap(~cultivo)
ggplot(data_1, aes(y = MDA_p)) +
geom_boxplot(aes(x = playa, color = playa), alpha = 0) +
geom_point(aes(x = playa, color =playa), alpha = 1, size = 2) +
facet_wrap(~cultivo)
# Ajuste de modelos ANOVA con rstatix
modelos <- lapply(colnames(data_1[c(5:31)]), function(x){
anova_test(formula = as.formula(paste0(x, " ~ playa * cultivo")), data_1)})
(anova_results <- reduce(modelos, full_join) %>%
add_column(.before = 1, variable = rep(colnames(data_1[c(5:31)]), each = 3)) %>%
adjust_pvalue(method = "BH"))
# Test de Levenese computa exactamente igual
modelos_levene <- lapply(colnames(data_1[c(5:31)]), function(x){
levene_test(formula = as.formula(paste0(x, " ~ playa * cultivo")), data_1)})
(levene_results <- reduce(modelos_levene, full_join) %>%
add_column(.before = 1, variable = colnames(data_1[c(5:31)])))
modelos_lm <- lapply(colnames(data_1[c(5:31)]), function(x){
lm(formula = as.formula(paste0(x, " ~ playa * cultivo")), data_1)})
modelos_shapiro <- lapply(modelos_lm, function(x){
shapiro_test(residuals(x))})
(shapiro_results <- reduce(modelos_shapiro, full_join) %>%
add_column(.before = 1, parametro = colnames(data_1[c(5:31)])))
View(levene_results)
View(shapiro_results)
ggplot(data_1, aes(y = G6PDH_p)) +
geom_boxplot(aes(x = playa, color = playa), alpha = 0) +
geom_point(aes(x = playa, color =playa), alpha = 1, size = 2) +
facet_wrap(~cultivo)
# Deteccion de outliers en SOD_t y CAT_t para normalidad de residuos
view(data_1 %>%
group_by(cultivo:playa) %>%
identify_outliers(G6PDH_p))
ggplot(data_1, aes(y = GR_t)) +
geom_boxplot(aes(x = playa, color = playa), alpha = 0) +
geom_point(aes(x = playa, color =playa), alpha = 1, size = 2) +
facet_wrap(~cultivo)
# Deteccion de outliers en SOD_t y CAT_t para normalidad de residuos
view(data_1 %>%
group_by(cultivo:playa) %>%
identify_outliers(GR_t))
# Se eliminan:
data_1$GR_t[9]  <- NA # Outlier no extremo, pero afecta a la normalidad de la variable?
ggplot(data_1, aes(y = GR_t)) +
geom_boxplot(aes(x = playa, color = playa), alpha = 0) +
geom_point(aes(x = playa, color =playa), alpha = 1, size = 2) +
facet_wrap(~cultivo)
modelos <- lapply(colnames(data_1[c(5:31)]), function(x){
anova_test(formula = as.formula(paste0(x, " ~ playa * cultivo")), data_1)})
(anova_results <- reduce(modelos, full_join) %>%
add_column(.before = 1, variable = rep(colnames(data_1[c(5:31)]), each = 3)) %>%
adjust_pvalue(method = "BH"))
# Test de Levenese computa exactamente igual
modelos_levene <- lapply(colnames(data_1[c(5:31)]), function(x){
levene_test(formula = as.formula(paste0(x, " ~ playa * cultivo")), data_1)})
(levene_results <- reduce(modelos_levene, full_join) %>%
add_column(.before = 1, variable = colnames(data_1[c(5:31)])))
# Para el test de Shapiro-Wilks se ajustan lm para extraer residuos
modelos_lm <- lapply(colnames(data_1[c(5:31)]), function(x){
lm(formula = as.formula(paste0(x, " ~ playa * cultivo")), data_1)})
modelos_shapiro <- lapply(modelos_lm, function(x){
shapiro_test(residuals(x))})
(shapiro_results <- reduce(modelos_shapiro, full_join) %>%
add_column(.before = 1, parametro = colnames(data_1[c(5:31)])))
View(modelos_shapiro)
View(shapiro_results)
ggplot(data_1, aes(y = MDA_t)) +
geom_boxplot(aes(x = playa, color = playa), alpha = 0) +
geom_point(aes(x = playa, color =playa), alpha = 1, size = 2) +
facet_wrap(~cultivo)
# Deteccion de outliers en SOD_t y CAT_t para normalidad de residuos
view(data_1 %>%
group_by(cultivo:playa) %>%
identify_outliers(MDA_t))
ggqqplot(residuals(modelos_lm[17]))
modelos_lm[17]
residuals(modelos_lm[17])
residuals(modelos_lm[[17])
residuals(modelos_lm[[17]])
qqplot(residuals(modelos_lm[[17]]))
ggqqplot(residuals(modelos_lm[[17]]))
qqnorm(residuals(modelos_lm[[17]]))
qqpoints <- qqnorm(residuals(modelos_lm[[17]]))
identify(qqpoints)
identify(qqpoints)
m_boxplot(aes(x = playa, color = playa), alpha = 0) +
geom_point(aes(x = playa, color =playa), alpha = 1, size = 2) +
facet_wrap(~cultivo)
m_boxplot(aes(x = playa, color = playa), alpha = 0) +
geom_point(aes(x = playa, color =playa), alpha = 1, size = 2) +
facet_wrap(~cultivo)
ggqqplot(residuals(modelos_lm[[17]]))
qqpoints <- qqnorm(residuals(modelos_lm[[17]]))
identify(qqpoints)
identify(qqpoints)
identify(qqpoints)
identify(qqpoints)
identify(qqpoints)
residuals(modelos_lm[[17]])[1]
residuals(modelos_lm[[17]])[3]
residuals(modelos_lm[[17]])[20]
ggplot(data_1, aes(y = MDA_t)) +
geom_boxplot(aes(x = playa, color = playa), alpha = 0) +
geom_point(aes(x = playa, color =playa), alpha = 1, size = 2) +
facet_wrap(~cultivo)
identify()
exp.p <- ggplot(data_1, aes(y = MDA_t)) +
+   geom_boxplot(aes(x = playa, color = playa), alpha = 0) +
+   geom_point(aes(x = playa, color =playa), alpha = 1, size = 2) +
+   facet_wrap(~cultivo)
(exp.p <- ggplot(data_1, aes(y = MDA_t)) +
geom_boxplot(aes(x = playa, color = playa), alpha = 0) +
geom_point(aes(x = playa, color =playa), alpha = 1, size = 2) +
facet_wrap(~cultivo)
)
identify(exp.p)
(exp.p <- ggplot(data_1, aes(y = MDA_t)) +
#geom_boxplot(aes(x = playa, color = playa), alpha = 0) +
geom_point(aes(x = playa:cultivo, color =playa), alpha = 1, size = 2)
#facet_wrap(~cultivo)
)
identify(exp.p)
ggplot(data_1, aes(y = MDA_t)) +
geom_boxplot(aes(x = playa, color = playa), alpha = 0) +
geom_point(aes(x = playa:cultivo, color =playa), alpha = 1, size = 2) +
facet_wrap(~cultivo)
data_1$MDA_t[1]  <- NA # Creo que es el que mas se desvia en el qqplot
ggplot(data_1, aes(y = MDA_t)) +
geom_boxplot(aes(x = playa, color = playa), alpha = 0) +
geom_point(aes(x = playa:cultivo, color =playa), alpha = 1, size = 2) +
facet_wrap(~cultivo)
ggplot(data_1, aes(y = MDA_t)) +
geom_boxplot(aes(x = playa, color = playa), alpha = 0) +
geom_point(aes(x = playa, color =playa), alpha = 1, size = 2) +
facet_wrap(~cultivo)
ggplot(data_1, aes(y = MDA_t)) +
geom_boxplot(aes(x = playa, color = playa), alpha = 0) +
geom_point(aes(x = playa, color = playa), alpha = 1, size = 2) +
facet_wrap(~cultivo)
modelos_lm <- lapply(colnames(data_1[c(5:31)]), function(x){
lm(formula = as.formula(paste0(x, " ~ playa * cultivo")), data_1)})
modelos_shapiro <- lapply(modelos_lm, function(x){
shapiro_test(residuals(x))})
(shapiro_results <- reduce(modelos_shapiro, full_join) %>%
add_column(.before = 1, parametro = colnames(data_1[c(5:31)])))
View(shapiro_results)
ggplot(data_1, aes(y = Fbasica_p)) +
geom_boxplot(aes(x = playa, color = playa), alpha = 0) +
geom_point(aes(x = playa, color = playa), alpha = 1, size = 2) +
facet_wrap(~cultivo)
# Deteccion de outliers en SOD_t y CAT_t para normalidad de residuos
view(data_1 %>%
group_by(cultivo:playa) %>%
identify_outliers(Fbasica_p))
View(data_1)
data_1$Fbasica_p[11]  <- NA # Outlier extremo y afecta a normalidad
modelos_lm <- lapply(colnames(data_1[c(5:31)]), function(x){
lm(formula = as.formula(paste0(x, " ~ playa * cultivo")), data_1)})
modelos_shapiro <- lapply(modelos_lm, function(x){
shapiro_test(residuals(x))})
(shapiro_results <- reduce(modelos_shapiro, full_join) %>%
add_column(.before = 1, parametro = colnames(data_1[c(5:31)])))
View(shapiro_results)
ggplot(data_1, aes(y = Fbasica_p)) +
geom_boxplot(aes(x = playa, color = playa), alpha = 0) +
geom_point(aes(x = playa, color = playa), alpha = 1, size = 2) +
facet_wrap(~cultivo)
ggplot(data_1, aes(y = Fbasica_t)) +
geom_boxplot(aes(x = playa, color = playa), alpha = 0) +
geom_point(aes(x = playa, color = playa), alpha = 1, size = 2) +
facet_wrap(~cultivo)
# Deteccion de outliers en SOD_t y CAT_t para normalidad de residuos
view(data_1 %>%
group_by(cultivo:playa) %>%
identify_outliers(Fbasica_t))
data_1$Fbasica_t[5]
data_1$Fbasica_t[9]
data_1$Fbasica_t[5]  <- NA # Outlier extremo y afecta a normalidad
data_1$Fbasica_t[9]  <- NA # Outlier extremo y afecta a normalidad
modelos_lm <- lapply(colnames(data_1[c(5:31)]), function(x){
lm(formula = as.formula(paste0(x, " ~ playa * cultivo")), data_1)})
modelos_shapiro <- lapply(modelos_lm, function(x){
shapiro_test(residuals(x))})
(shapiro_results <- reduce(modelos_shapiro, full_join) %>%
add_column(.before = 1, parametro = colnames(data_1[c(5:31)])))
View(shapiro_results)
ggplot(data_1, aes(y = Fbasica_t)) +
geom_boxplot(aes(x = playa, color = playa), alpha = 0) +
geom_point(aes(x = playa, color = playa), alpha = 1, size = 2) +
facet_wrap(~cultivo)
ggplot(data_1, aes(y = Lisozima_p)) +
geom_boxplot(aes(x = playa, color = playa), alpha = 0) +
geom_point(aes(x = playa, color = playa), alpha = 1, size = 2) +
facet_wrap(~cultivo)
# Deteccion de outliers en SOD_t y CAT_t para normalidad de residuos
view(data_1 %>%
group_by(cultivo:playa) %>%
identify_outliers(Lisozima_p))
data_1$Lisozima_p[1]
data_1$Lisozima_p[1]  <- NA # Outlier extremo y afecta a normalidad
ggplot(data_1, aes(y = Lisozima_p)) +
geom_boxplot(aes(x = playa, color = playa), alpha = 0) +
geom_point(aes(x = playa, color = playa), alpha = 1, size = 2) +
facet_wrap(~cultivo)
modelos_lm <- lapply(colnames(data_1[c(5:31)]), function(x){
lm(formula = as.formula(paste0(x, " ~ playa * cultivo")), data_1)})
modelos_shapiro <- lapply(modelos_lm, function(x){
shapiro_test(residuals(x))})
(shapiro_results <- reduce(modelos_shapiro, full_join) %>%
add_column(.before = 1, parametro = colnames(data_1[c(5:31)])))
View(shapiro_results)
ggplot(data_1, aes(y = G6PDH_p)) +
geom_boxplot(aes(x = playa, color = playa), alpha = 0) +
geom_point(aes(x = playa, color = playa), alpha = 1, size = 2) +
facet_wrap(~cultivo)
# Deteccion de outliers en SOD_t y CAT_t para normalidad de residuos
view(data_1 %>%
group_by(cultivo:playa) %>%
identify_outliers(G6PDH_p))
#Para ver que puntos afectan a la normalidad de residuos:
qqpoints <- qqnorm(residuals(modelos_lm[[12]])) # cambiar por el n de modelo que sea
identify(qqpoints) # Clicas en el dato y le das a ESC, te dice el indice del punto
ggqqplot(residuals(modelos_lm[[17]]))
#Para ver que puntos afectan a la normalidad de residuos:
qqpoints <- qqnorm(residuals(modelos_lm[[12]])) # cambiar por el n de modelo que sea
identify(qqpoints) # Clicas en el dato y le das a ESC, te dice el indice del punto
data_1$G6PDH_p[7]  <- NA
ggplot(data_1, aes(y = G6PDH_p)) +
geom_boxplot(aes(x = playa, color = playa), alpha = 0) +
geom_point(aes(x = playa, color = playa), alpha = 1, size = 2) +
facet_wrap(~cultivo)
# Test de Levenese computa exactamente igual
modelos_levene <- lapply(colnames(data_1[c(5:31)]), function(x){
levene_test(formula = as.formula(paste0(x, " ~ playa * cultivo")), data_1)})
(levene_results <- reduce(modelos_levene, full_join) %>%
add_column(.before = 1, variable = colnames(data_1[c(5:31)])))
View(levene_results)
modelos_lm[[12]]
plot(modelos_lm[[12]])
plot(modelos_lm[[12]])
data_1$G6PDH_p[7] # La grafica de residuos vs ajustados los marca
<- NA
data_1$G6PDH_p[7] <- NA
data_1$G6PDH_p[9] <- NA
# Test de Levenese computa exactamente igual
modelos_levene <- lapply(colnames(data_1[c(5:31)]), function(x){
levene_test(formula = as.formula(paste0(x, " ~ playa * cultivo")), data_1)})
(levene_results <- reduce(modelos_levene, full_join) %>%
add_column(.before = 1, variable = colnames(data_1[c(5:31)])))
View(levene_results)
ggplot(data_1, aes(y = G6PDH_p)) +
geom_boxplot(aes(x = playa, color = playa), alpha = 0) +
geom_point(aes(x = playa, color = playa), alpha = 1, size = 2) +
facet_wrap(~cultivo)
# Ajuste de modelos ANOVA con rstatix
modelos <- lapply(colnames(data_1[c(5:31)]), function(x){
anova_test(formula = as.formula(paste0(x, " ~ playa * cultivo")), data_1)})
(anova_results <- reduce(modelos, full_join) %>%
add_column(.before = 1, variable = rep(colnames(data_1[c(5:31)]), each = 3)) %>%
adjust_pvalue(method = "BH"))
View(anova_results)
