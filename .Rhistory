datos <- datos %>% mutate(sexo_MALE = ifelse(sex == "male", T, F)) %>%
select(-sex)
datos_scl <- scale(datos[,2:6])
# Matriz de distancias
distancia <- dist(datos_scl)
ac1 <- hclust(distancia)
plot(ac1, main = "Clúster sobre especies de pingüinos", cex = 0.7)
# Quitamos dato 283 que no agrupa bien
datos <- datos[-283,]
datos_scl <- scale(datos[,2:6])
distancia <- dist(datos_scl)
ac1 <- hclust(distancia)
plot(ac1, main = "Clúster sobre especies de pingüinos", cex = 0.7)
rect.hclust(ac1, 3)
datos$ac1 <- cutree(ac1, k = 3) # aqui guardar en el dataset resultados del ac1
fviz_nbclust(scale(datos[2:6]), kmeans, "wss")
# Segun este método, deberiamos escoger 4 clusters
set.seed(999)
ac2 <- kmeans(as.matrix(scale(datos[2:6])), 4)
ac2
fviz_cluster(ac2, scale(datos[2:6]), ellipse.type = "norm")
datos_scl <- scale(datos[,2:6])
# Matriz de distancias
distancia <- dist(datos_scl)
ac1 <- hclust(distancia)
6
6
fviz_nbclust(scale(datos[2:6]), kmeans, "wss")
# Segun este método, deberiamos escoger 4 clusters
set.seed(999)
ac2 <- kmeans(as.matrix(scale(datos[2:6])), 5)
ac2
fviz_cluster(ac2, scale(datos[2:6]), ellipse.type = "norm")
ac2 <- kmeans(as.matrix(scale(datos[2:6])), 6)
ac2
fviz_cluster(ac2, scale(datos[2:6]), ellipse.type = "norm")
ac2 <- kmeans(as.matrix(scale(datos[2:6])), 5)
ac2
fviz_cluster(ac2, scale(datos[2:6]), ellipse.type = "norm")
ac2 <- kmeans(as.matrix(scale(datos[2:6])), 3)
ac2
fviz_cluster(ac2, scale(datos[2:6]), ellipse.type = "norm")
ac2 <- kmeans(as.matrix(scale(datos[2:6])), 4)
ac2
fviz_cluster(ac2, scale(datos[2:6]), ellipse.type = "norm")
datos <- select(penguins, species, bill_length_mm, bill_depth_mm, flipper_length_mm, body_mass_g, sex)
### Exploración y limpieza ----
boxplot(datos[2:5]) # No parece que haya datos anómalos a simple vista
# Transformacion de la variable sexo en factor
datos$sex <- as.factor(datos$sex)
summary(datos$sex)
# Eliminamos filas que contengan NAs
datos <- drop_na(datos)
# Obtencion de variables dummy a partir del sexo
datos <- datos %>% mutate(sexo_MALE = ifelse(sex == "male", T, F)) %>%
select(-sex)
### Clustering jerarquico ----
# Escalo las variables numericas y las nuevas variables dummies, omito la variable sexo
fviz_nbclust(scale(datos[2:6]), kmeans, "wss")
# Segun este método, deberiamos escoger 4 clusters
set.seed(999)
ac2 <- kmeans(as.matrix(scale(datos[2:6])), 4)
ac2
fviz_cluster(ac2, scale(datos[2:6]), ellipse.type = "norm")
ac2 <- kmeans(as.matrix(scale(datos[2:6])), 5)
ac2
fviz_cluster(ac2, scale(datos[2:6]), ellipse.type = "norm")
ac2 <- kmeans(as.matrix(scale(datos[2:6])), 6)
ac2
fviz_cluster(ac2, scale(datos[2:6]), ellipse.type = "norm")
datos_scl <- scale(datos[,2:6])
# Matriz de distancias
distancia <- dist(datos_scl)
ac1 <- hclust(distancia)
plot(ac1, main = "Clúster sobre especies de pingüinos", cex = 0.7)
# Quitamos dato 283 que no agrupa bien
datos <- datos[-283,]
datos_scl <- scale(datos[,2:6])
distancia <- dist(datos_scl)
ac1 <- hclust(distancia)
plot(ac1, main = "Clúster sobre especies de pingüinos", cex = 0.7)
rect.hclust(ac1, 3)
datos$ac1 <- cutree(ac1, k = 3) # aqui guardar en el dataset resultados del ac1
fviz_nbclust(scale(datos[2:6]), kmeans, "wss")
# Segun este método, deberiamos escoger 4 clusters
set.seed(999)
ac2 <- kmeans(as.matrix(scale(datos[2:6])), 4)
ac2
fviz_cluster(ac2, scale(datos[2:6]), ellipse.type = "norm")
ac2 <- kmeans(as.matrix(scale(datos[2:6])), 3)
ac2
fviz_cluster(ac2, scale(datos[2:6]), ellipse.type = "norm")
ac2 <- kmeans(as.matrix(scale(datos[2:6])), 5)
ac2
fviz_cluster(ac2, scale(datos[2:6]), ellipse.type = "norm")
ac2 <- kmeans(as.matrix(scale(datos[2:6])), 6)
ac2
fviz_cluster(ac2, scale(datos[2:6]), ellipse.type = "norm")
fviz_nbclust(scale(datos[2:6]), kmeans, "wss")
ac2 <- kmeans(as.matrix(scale(datos[2:6])), 4)
ac2
fviz_cluster(ac2, scale(datos[2:6]), ellipse.type = "norm")
ac2 <- kmeans(as.matrix(scale(datos[2:6])), 5)
ac2
fviz_cluster(ac2, scale(datos[2:6]), ellipse.type = "norm")
(p_ac2 <- fviz_pca_biplot(cp, habillage=as.factor(datos$ac2),
addEllipses=TRUE, ellipse.level=0.95, palette = viridis(5, begin = 0.25, end = 0.8), col.var = "mediumvioletred") + labs(title ="Clustering no jerárquico (k-means)"))
(p_ac2 <- fviz_pca_biplot(cp, habillage=as.factor(datos$ac2),
addEllipses=TRUE, ellipse.level=0.95, palette = viridis(5, begin = 0.25, end = 0.8), col.var = "mediumvioletred") + labs(title ="Clustering no jerárquico (k-means)"))
datos$ac2 <- ac2$cluster
(p_ac2 <- fviz_pca_biplot(cp, habillage=as.factor(datos$ac2),
addEllipses=TRUE, ellipse.level=0.95, palette = viridis(5, begin = 0.25, end = 0.8), col.var = "mediumvioletred") + labs(title ="Clustering no jerárquico (k-means)"))
ac2 <- kmeans(as.matrix(scale(datos[2:6])), 6)
ac2
fviz_cluster(ac2, scale(datos[2:6]), ellipse.type = "norm")
# Segun este método, deberiamos escoger 4 clusters
set.seed(999)
ac2 <- kmeans(as.matrix(scale(datos[2:6])), 6)
ac2
fviz_cluster(ac2, scale(datos[2:6]), ellipse.type = "norm")
# Segun este método, deberiamos escoger 4 clusters
set.seed(99)
ac2 <- kmeans(as.matrix(scale(datos[2:6])), 6)
ac2
fviz_cluster(ac2, scale(datos[2:6]), ellipse.type = "norm")
(p_ac2 <- fviz_pca_biplot(cp, habillage=as.factor(datos$ac2),
addEllipses=TRUE, ellipse.level=0.95, palette = viridis(5, begin = 0.35, end = 0.8), col.var = "mediumvioletred") + labs(title ="Clustering no jerárquico (k-means)"))
(p_sp <- fviz_pca_biplot(cp, habillage=as.factor(datos$species),
addEllipses=TRUE, ellipse.level=0.95, palette = viridis(3, alpha = 0.6, begin = 0.1, end = 0.7, option = "G"), col.var = "mediumvioletred") + labs(title ="Especies de pingüinos"))
(p_ac1 <- fviz_pca_biplot(cp, habillage=as.factor(datos$ac1),
addEllipses=TRUE, ellipse.level=0.95, palette = viridis(3, begin = 0.35, end = 0.8), col.var = "mediumvioletred") + labs(title ="Clustering jerárquico"))
(p_ac2 <- fviz_pca_biplot(cp, habillage=as.factor(datos$ac2),
addEllipses=TRUE, ellipse.level=0.95, palette = viridis(5, begin = 0.35, end = 0.8), col.var = "mediumvioletred") + labs(title ="Clustering no jerárquico (k-means)"))
p_scree <- fviz_nbclust(scale(datos[2:6]), kmeans, "wss")
set.seed(999)
ac2 <- kmeans(as.matrix(scale(datos[2:6])), 5)
p_cluster <- fviz_cluster(ac2, scale(datos[2:6]), ellipse.type = "norm")
datos$ac2 <- ac2$cluster
(p_scree | p_cluster) & theme_minimal()
(p_sp <- fviz_pca_biplot(cp, habillage=as.factor(datos$species),
addEllipses=TRUE, ellipse.level=0.95, palette = viridis(3, alpha = 0.6, begin = 0.1, end = 0.7, option = "G"), col.var = "mediumvioletred") + labs(title ="Especies de pingüinos"))
(p_ac1 <- fviz_pca_biplot(cp, habillage=as.factor(datos$ac1),
addEllipses=TRUE, ellipse.level=0.95, palette = viridis(3, begin = 0.35, end = 0.8), col.var = "mediumvioletred") + labs(title ="Clustering jerárquico"))
(p_ac2 <- fviz_pca_biplot(cp, habillage=as.factor(datos$ac2),
addEllipses=TRUE, ellipse.level=0.95, palette = viridis(5, begin = 0.35, end = 0.8), col.var = "mediumvioletred") + labs(title ="Clustering no jerárquico (k-means)"))
p_scree <- fviz_nbclust(scale(datos[2:6]), kmeans, "wss")
set.seed(999)
ac2 <- kmeans(as.matrix(scale(datos[2:6])), 6)
p_cluster <- fviz_cluster(ac2, scale(datos[2:6]), ellipse.type = "norm")
datos$ac2 <- ac2$cluster
(p_scree | p_cluster) & theme_minimal()
p_scree <- fviz_nbclust(scale(datos[2:6]), kmeans, "wss")
set.seed(999)
ac2 <- kmeans(as.matrix(scale(datos[2:6])), 6)
p_cluster <- fviz_cluster(ac2, scale(datos[2:6]), ellipse.type = "norm")
datos$ac2 <- ac2$cluster
(p_scree | p_cluster) & theme_minimal()
p_scree <- fviz_nbclust(scale(datos[2:6]), kmeans, "wss")
set.seed(99)
ac2 <- kmeans(as.matrix(scale(datos[2:6])), 6)
p_cluster <- fviz_cluster(ac2, scale(datos[2:6]), ellipse.type = "norm")
datos$ac2 <- ac2$cluster
(p_scree | p_cluster) & theme_minimal()
(p_sp <- fviz_pca_biplot(cp, habillage=as.factor(datos$species),
addEllipses=TRUE, ellipse.level=0.95, palette = viridis(3, alpha = 0.6, begin = 0.1, end = 0.7, option = "G"), col.var = "mediumvioletred") + labs(title ="Especies de pingüinos"))
(p_ac1 <- fviz_pca_biplot(cp, habillage=as.factor(datos$ac1),
addEllipses=TRUE, ellipse.level=0.95, palette = viridis(3, begin = 0.35, end = 0.8), col.var = "mediumvioletred") + labs(title ="Clustering jerárquico"))
(p_ac2 <- fviz_pca_biplot(cp, habillage=as.factor(datos$ac2),
addEllipses=TRUE, ellipse.level=0.95, palette = viridis(6, begin = 0.35, end = 0.8), col.var = "mediumvioletred") + labs(title ="Clustering no jerárquico (k-means)"))
### SETUP ----
library(tidyverse)
library(multcompView)
library(car)
library(rstatix)
### SETUP y filtrado de datos ----
# En portatil (arreglar)
# setwd("D:/collf/Documents/GitHub/Revision_datos_TFG") # Casa
#source(file = "./scripts enero24/0_data_home.R")
# En laboratorio
setwd("C:/Users/Usuario/Documents/GitHub/Revision_datos_TFG") # Lab
source(file = "./scripts septiembre 2024-2025/0_data_lab.R")
source(file = "./scripts septiembre 2024-2025/1_funciones_graficas.R")
# Filtrar: solo anemonas cultivadas
data_2 <- filter(datos, cultivo == "cultured")
data_2 %>%
group_by(playa, corte, tiempo) %>%
get_summary_stats(CAT_p, type = "mean_se")
library(tidyverse)
library(multcompView)
library(car)
library(rstatix)
data_2 %>%
group_by(playa, corte, tiempo) %>%
get_summary_stats(CAT_p, type = "mean_se")
# Exploracion
(bxp <- ggboxplot(data_2, x = "tiempo", y = "SOD_p",
color = "corte", palette = "jco", facet.by = "playa"))
library(ggpubr)
# Exploracion
(bxp <- ggboxplot(data_2, x = "tiempo", y = "SOD_p",
color = "corte", palette = "jco", facet.by = "playa"))
# Normalidad de residuos general
model_3  <- lm(SOD_p ~ playa*corte*tiempo, data = data_2)
ggqqplot(residuals(model_3))
shapiro_test(residuals(model))
shapiro_test(residuals(model_3))
# Normalidad de residuos por grupo
data_2 %>%
group_by(playa, corte, tiempo) %>%
shapiro_test(SOD_p)
ggqqplot(data_2, "SOD_p", ggtheme = theme_bw()) +
facet_grid(corte + tiempo ~ playa, labeller = "label_both")
# Levene
data_2 %>% levene_test(SOD_p ~ playa*corte*tiempo)
## Computacion del ANOVA
res.aov <- data_2 %>% anova_test(SOD_p ~ playa*corte*tiempo)
res.aov
data_2 %>%
group_by(playa, corte, tiempo) %>%
get_summary_stats(SOD_p, type = "mean_se")
### Superoxido dismutasa----
# Exploracion
data_2 %>%
group_by(playa, corte, tiempo) %>%
get_summary_stats(SOD_p, type = "mean_se")
(bxp <- ggboxplot(data_2, x = "tiempo", y = "SOD_p",
color = "corte", palette = "npg", facet.by = "playa"))
(bxp <- ggboxplot(data_2, x = "tiempo", y = "SOD_p",
color = "corte", palette = "aaas", facet.by = "playa"))
(bxp <- ggboxplot(data_2, x = "tiempo", y = "SOD_p",
color = "corte", palette = "lancet", facet.by = "playa"))
(bxp <- ggboxplot(data_2, x = "tiempo", y = "SOD_p",
color = "corte", palette = "ucscgb", facet.by = "playa"))
(bxp <- ggboxplot(data_2, x = "tiempo", y = "SOD_p",
color = "corte", palette = "frontiers", facet.by = "playa"))
(bxp <- ggboxplot(data_2, x = "tiempo", y = "SOD_p",
color = "corte", palette = "frontiers", facet.by = "playa",
title = "Superoxido dismutasa columnar"))
(bxp <- ggboxplot(data_2, x = "tiempo", y = "SOD_p",
color = "corte", palette = "frontiers", facet.by = "playa",
title = "Superoxido dismutasa columnar", linewidth =2))
(bxp <- ggboxplot(data_2, x = "tiempo", y = "SOD_p",
color = "corte", palette = "frontiers", facet.by = "playa",
title = "Superoxido dismutasa columnar", linewidth =5))
(bxp <- ggboxplot(data_2, x = "tiempo", y = "SOD_p",
color = "corte", palette = "frontiers", facet.by = "playa",
title = "Superoxido dismutasa columnar"))
# Normalidad de residuos general
model_3  <- lm(SOD_p ~ playa*corte*tiempo, data = data_2)
# Normalidad de residuos general
modelo_completo  <- lm(SOD_p ~ playa*corte*tiempo, data = data_2)
ggqqplot(residuals(modelo_completo))
shapiro_test(residuals(modelo_completo))
# Normalidad de residuos por grupo
data_2 %>%
group_by(playa, corte, tiempo) %>%
shapiro_test(SOD_p)
ggqqplot(data_2, "SOD_p", ggtheme = theme_bw()) +
facet_grid(corte + tiempo ~ playa, labeller = "label_both")
# En Calahonda dissected 1 no se distribuyen normalmente los 3 puntos
data_2 %>%
group_by(playa, corte, tiempo) %>%
identify_outliers(SOD_p)
# En Calahonda dissected 1 no se distribuyen normalmente los 3 puntos
data_2 %>%
identify_outliers(SOD_p)
# Homogeneidad de varianzas con Levene
data_2 %>% levene_test(SOD_p ~ playa*corte*tiempo)
## Computacion del ANOVA
res.aov <- data_2 %>% anova_test(SOD_p ~ playa*corte*tiempo)
res.aov
# Descomposicion por playa
data_2 %>%
group_by(playa) %>%
anova_test(SOD_p ~ corte*tiempo, error = modelo_completo)
efecto.tratamiento <- data_2 %>%
group_by(playa, tiempo) %>%
anova_test(SOD_p ~ corte, error = modelo_completo)
efecto.tratamiento %>% as.tibble() %>% filter(playa == "Salobreña")
pwc <- data_2 %>%
group_by(playa, tiempo) %>%
emmeans_test(SOD_p ~ corte, p.adjust.method = "bonferroni")
pwc %>% as.tibble() %>% filter(playa == "Salobreña")
pwc <- data_2 %>%
group_by(playa, tiempo) %>%
emmeans_test(SOD_p ~ corte, p.adjust.method = "bonferroni") %>%
as.tibble() %>% select(-df, -statistic, -p)
pwc %>% as.tibble() %>% filter(playa == "Salobreña")
pwc <- pwc %>% add_xy_position(x = "treatment")
pwc <- pwc %>% add_xy_position(x = "corte")
pwc
pwc <- data_2 %>%
group_by(playa, tiempo) %>%
emmeans_test(SOD_p ~ corte, p.adjust.method = "bonferroni") %>%
as.tibble() %>% select(-df, -statistic, -p)
pwc %>% as.tibble() %>% filter(playa == "Salobreña")
pwc <- pwc %>% add_xy_position(x = "corte")
pwc
View(pwc)
pwc.filtered <- pwc %>%  filter(playa == "Salobreña")
# Graficas
bxp +
stat_pvalue_manual(
pwc.filtered, color = "tiempo", linetype = "tiempo", hide.ns = TRUE,
tip.length = 0, step.increase = 0.1, step.group.by = "playa"
) +
labs(
subtitle = get_test_label(res.aov, detailed = TRUE),
caption = get_pwc_label(pwc)
)
# Graficas
bxp +
stat_pvalue_manual(
pwc.filtered, color = "tiempo", linetype = "tiempo", hide.ns = TRUE,
tip.length = 0, step.increase = 0.1, step.group.by = "playa"
)
(bxp <- ggboxplot(data_2, x = "tiempo", y = "SOD_p",
color = "corte", palette = "frontiers", facet.by = "playa",
title = "Superoxido dismutasa columnar"))
# Graficas
bxp +
stat_pvalue_manual(
pwc.filtered, color = "tiempo", linetype = "tiempo", hide.ns = TRUE,
tip.length = 0, step.increase = 0.1, step.group.by = "playa"
)
# Graficas
bxp +
stat_pvalue_manual(
pwc.filtered, color = "corte", linetype = "tiempo", hide.ns = TRUE,
tip.length = 0, step.increase = 0.1, step.group.by = "playa"
)
(bxp <- ggboxplot(data_2, x = "corte", y = "SOD_p",
color = "tiempo", palette = "frontiers", facet.by = "playa",
title = "Superoxido dismutasa columnar"))
# Graficas
bxp +
stat_pvalue_manual(
pwc.filtered, color = "corte", linetype = "tiempo", hide.ns = TRUE,
tip.length = 0, step.increase = 0.1, step.group.by = "playa"
)
# Graficas
bxp +
stat_pvalue_manual(
pwc.filtered, color = "tiempo", linetype = "tiempo", hide.ns = TRUE,
tip.length = 0, step.increase = 0.1, step.group.by = "playa"
)
(bxp <- ggboxplot(data_2, x = "tiempo", y = "SOD_p",
color = "corte", palette = "frontiers", facet.by = "playa",
title = "Superoxido dismutasa columnar"))
### Superoxido dismutasa PIE----
# Exploracion
data_2 %>%
group_by(playa, corte, tiempo) %>%
get_summary_stats(SOD_p, type = "mean_se")
# Grafica
tabla_summ <- data_2 %>%
group_by(playa, corte, tiempo) %>%
get_summary_stats(SOD_p, type = "mean_se")
modelo <- aov(SOD_p~corte*tiempo, filter(data_2, playa == "Salobreña"))
tukey_loop <- TukeyHSD(modelo)
cld.tukey <- multcompLetters4(modelo, tukey_loop, reversed = T)
(letras <- rownames_to_column(as.data.frame(cld.tukey$`corte:tiempo`$Letters)))
View(tabla_summ)
colnames(letras) <- c("corte:tiempo", "tukey")
letras <- letras %>% separate_wider_delim(`corte:tiempo`, ":", names = c("tratamiento", "tiempo"), cols_remove=F)
letras
letras <- letras %>% separate_wider_delim(`corte:tiempo`, ":", names = c("tratamiento", "tiempo"), cols_remove=F) %>% select(-`corte:tiempo`)
colnames(letras) <- c("corte:tiempo", "tukey")
modelo <- aov(SOD_p~corte*tiempo, filter(data_2, playa == "Salobreña"))
tukey_loop <- TukeyHSD(modelo)
cld.tukey <- multcompLetters4(modelo, tukey_loop, reversed = T)
(letras <- rownames_to_column(as.data.frame(cld.tukey$`corte:tiempo`$Letters)))
colnames(letras) <- c("corte:tiempo", "tukey")
letras <- letras %>% separate_wider_delim(`corte:tiempo`, ":", names = c("tratamiento", "tiempo"), cols_remove=F) %>% select(-`corte:tiempo`)
letras
letras <- c(rep("",4), rep("", 4), letras)
letras
modelo <- aov(SOD_p~corte*tiempo, filter(data_2, playa == "Salobreña"))
tukey_loop <- TukeyHSD(modelo)
cld.tukey <- multcompLetters4(modelo, tukey_loop, reversed = T)
(letras <- rownames_to_column(as.data.frame(cld.tukey$`corte:tiempo`$Letters)))
colnames(letras) <- c("corte:tiempo", "tukey")
letras <- letras %>% separate_wider_delim(`corte:tiempo`, ":", names = c("tratamiento", "tiempo"), cols_remove=F) %>% select(-`corte:tiempo`)
letras <- c(rep("",4), rep("", 4), letras$tukey)
letras
modelo <- aov(SOD_p~corte*tiempo, filter(data_2, playa == "Salobreña"))
tukey_loop <- TukeyHSD(modelo)
cld.tukey <- multcompLetters4(modelo, tukey_loop, reversed = T)
(letras <- rownames_to_column(as.data.frame(cld.tukey$`corte:tiempo`$Letters)))
colnames(letras) <- c("corte:tiempo", "tukey")
letras <- letras %>% separate_wider_delim(`corte:tiempo`, ":", names = c("tratamiento", "tiempo"), cols_remove=F) %>% select(-`corte:tiempo`)
tabla_summ <- merge(tabla_summ, letras)
tabla_summ
tabla_summ <- data_2 %>%
group_by(playa, corte, tiempo) %>%
get_summary_stats(SOD_p, type = "mean_se")
modelo <- aov(SOD_p~corte*tiempo, filter(data_2, playa == "Salobreña"))
tukey_loop <- TukeyHSD(modelo)
cld.tukey <- multcompLetters4(modelo, tukey_loop, reversed = T)
(letras <- rownames_to_column(as.data.frame(cld.tukey$`corte:tiempo`$Letters)))
colnames(letras) <- c("corte:tiempo", "tukey")
letras <- letras %>% separate_wider_delim(`corte:tiempo`, ":", names = c("tratamiento", "tiempo"), cols_remove=F) %>% select(-`corte:tiempo`)
letras
letras$playa <- "Salobreña"
letras
tabla_summ <- merge(tabla_summ, letras)
tabla_summ
# Grafica
tabla_summ <- data_2 %>%
group_by(playa, corte, tiempo) %>%
get_summary_stats(SOD_p, type = "mean_se")
modelo <- aov(SOD_p~corte*tiempo, filter(data_2, playa == "Salobreña"))
tukey_loop <- TukeyHSD(modelo)
cld.tukey <- multcompLetters4(modelo, tukey_loop, reversed = T)
(letras <- rownames_to_column(as.data.frame(cld.tukey$`corte:tiempo`$Letters)))
colnames(letras) <- c("corte:tiempo", "tukey")
letras <- letras %>% separate_wider_delim(`corte:tiempo`, ":", names = c("corte", "tiempo"), cols_remove=F) %>% select(-`corte:tiempo`)
letras
letras$playa = "Salobreña"
letras
tabla_summ
tabla_summ <- merge(tabla_summ, letras)
tabla_summ
?merge()
tabla_summ <- merge(tabla_summ, letras, allx = T)
# Grafica
tabla_summ <- data_2 %>%
group_by(playa, corte, tiempo) %>%
get_summary_stats(SOD_p, type = "mean_se")
modelo <- aov(SOD_p~corte*tiempo, filter(data_2, playa == "Salobreña"))
tukey_loop <- TukeyHSD(modelo)
cld.tukey <- multcompLetters4(modelo, tukey_loop, reversed = T)
(letras <- rownames_to_column(as.data.frame(cld.tukey$`corte:tiempo`$Letters)))
colnames(letras) <- c("corte:tiempo", "tukey")
letras <- letras %>% separate_wider_delim(`corte:tiempo`, ":", names = c("corte", "tiempo"), cols_remove=F) %>% select(-`corte:tiempo`)
letras$playa = "Salobreña"
tabla_summ <- merge(tabla_summ, letras, all.x = T)
tabla_summ
tabla_summ <- data_2 %>%
group_by(playa, corte, tiempo) %>%
get_summary_stats(SOD_p, type = "mean_se")
modelo <- aov(SOD_p~corte*tiempo, filter(data_2, playa == "Salobreña"))
tukey_loop <- TukeyHSD(modelo)
cld.tukey <- multcompLetters4(modelo, tukey_loop, reversed = T)
(letras <- rownames_to_column(as.data.frame(cld.tukey$`corte:tiempo`$Letters)))
colnames(letras) <- c("corte:tiempo", "tukey")
letras <- letras %>% separate_wider_delim(`corte:tiempo`, ":", names = c("corte", "tiempo"), cols_remove=F) %>% select(-`corte:tiempo`)
letras$playa = "Salobreña"
tabla_summ <- merge(tabla_summ, letras, all.x = T) %>% replace_na("")
tabla_summ$tukey <- replace_na(tabla_summ$tukey, "")
# Grafica
tabla_summ <- data_2 %>%
group_by(playa, corte, tiempo) %>%
get_summary_stats(SOD_p, type = "mean_se")
modelo <- aov(SOD_p~corte*tiempo, filter(data_2, playa == "Salobreña"))
tukey_loop <- TukeyHSD(modelo)
cld.tukey <- multcompLetters4(modelo, tukey_loop, reversed = T)
(letras <- rownames_to_column(as.data.frame(cld.tukey$`corte:tiempo`$Letters)))
colnames(letras) <- c("corte:tiempo", "tukey")
letras <- letras %>% separate_wider_delim(`corte:tiempo`, ":", names = c("corte", "tiempo"), cols_remove=F) %>% select(-`corte:tiempo`)
letras$playa = "Salobreña"
tabla_summ <- merge(tabla_summ, letras, all.x = T)
View(tabla_summ)
tabla_summ$tukey <- replace_na(tabla_summ$tukey, "")
bp <- ggbarplot(tabla_summ, x = tiempo, y = mean, color = corte, facet.by = playa)
tabla_summ
bp <- ggbarplot(tabla_summ, x = "tiempo", y = "mean", color = "corte", facet.by = "playa")
(bp <- ggbarplot(tabla_summ, x = "tiempo", y = "mean", color = "corte", facet.by = "playa"))
(bp <- ggbarplot(tabla_summ, x = "tiempo", y = "mean", color = "corte", facet.by = "playa", position = "dodge")
)
(bp <- ggbarplot(tabla_summ, x = "tiempo", y = "mean", color = "corte", facet.by = "playa", position = "dodge2"))
rlang::last_trace()
(bp <- ggbarplot(tabla_summ, x = "tiempo", y = "mean", color = "corte", facet.by = "playa", position = position_dodge()))
(bp <- ggbarplot(tabla_summ, x = "tiempo", y = "mean", color = "corte", facet.by = "playa", position = position_dodge2()))
(bp <- ggbarplot(tabla_summ, x = "tiempo", y = "mean", fill = "corte", facet.by = "playa", position = position_dodge2()))
(bp <- ggbarplot(tabla_summ, x = "tiempo", y = "mean", fill = "corte", color = "corte", facet.by = "playa", position = position_dodge2()))
(bxp <- ggboxplot(data_2, x = "tiempo", y = "SOD_p",
color = "corte", palette = "frontiers", facet.by = "playa",
title = "Superoxido dismutasa columnar"))
(bxp <- ggboxplot(data_2, x = "tiempo", y = "SOD_p",
fill = "corte", palette = "frontiers", facet.by = "playa",
title = "Superoxido dismutasa columnar"))
(bxp <- ggboxplot(data_2, x = "tiempo", y = "SOD_p",
fill = "corte", color = "white", palette = "frontiers", facet.by = "playa",
title = "Superoxido dismutasa columnar"))
(bxp <- ggboxplot(data_2, x = "tiempo", y = "SOD_p",
fill = "corte", color = "gray88", palette = "frontiers", facet.by = "playa",
title = "Superoxido dismutasa columnar"))
(bxp <- ggboxplot(data_2, x = "tiempo", y = "SOD_p",
fill = "corte", color = "gray58", palette = "frontiers", facet.by = "playa",
title = "Superoxido dismutasa columnar"))
(bxp <- ggboxplot(data_2, x = "tiempo", y = "SOD_p",
fill = "corte", color = "gray58",alpha = 0.5, palette = "frontiers", facet.by = "playa",
title = "Superoxido dismutasa columnar"))
(bxp <- ggboxplot(data_2, x = "tiempo", y = "SOD_p",
fill = "corte", color = "corte",alpha = 0.5, palette = "frontiers", facet.by = "playa",
title = "Superoxido dismutasa columnar"))
(bxp <- ggboxplot(data_2, x = "tiempo", y = "SOD_p",
fill = "corte", color = "corte",alpha = 0.65, palette = "frontiers", facet.by = "playa",
title = "Superoxido dismutasa columnar"))
(bp <- ggbarplot(tabla_summ, x = "tiempo", y = "mean", fill = "corte", color = "corte", facet.by = "playa", position = position_dodge2()))
(bp <- ggbarplot(tabla_summ, x = "tiempo", y = "mean", fill = "corte", color = "corte", alpha = 0.7, facet.by = "playa", position = position_dodge2()))
(bp <- ggbarplot(tabla_summ, x = "tiempo", y = "mean", fill = "corte", color = "corte", alpha = 0.95, facet.by = "playa", position = position_dodge2()))
(bp <- ggbarplot(tabla_summ, x = "tiempo", y = "mean", fill = "corte", color = "corte", alpha = 0.9, facet.by = "playa", position = position_dodge2()))
(bp <- ggbarplot(tabla_summ, x = "tiempo", y = "mean", fill = "corte", color = "corte", alpha = 0.9, facet.by = "playa", position = position_dodge2()) +
ggtext(tabla_summ, x = "tiempo", y = "mean", label = "tukey", grouping.vars = "corte", facet.by = "playa"))
(bxp <- ggboxplot(data_2, x = "tiempo", y = "SOD_p",
fill = "corte", color = "corte", alpha = 0.65, palette = "frontiers", facet.by = "playa",
title = "Superoxido dismutasa columnar"))
(bxp <- ggboxplot(data_2, x = "tiempo", y = "SOD_p",
fill = "corte", color = "corte", alpha = 0.85, palette = "frontiers", facet.by = "playa",
title = "Superoxido dismutasa columnar"))
