labs(title = "Slopes for Linear Model:\n Breeding Success ~ Year") +
xlab("Species") +
ylab("Slope") +
theme_custom() +
theme(legend.position = "none",
panel.grid.major.x = element_blank(),
plot.title = element_text(size = 18, hjust = 0.5),
axis.title = element_text(size = 14),
axis.text = element_text(size = 10, face = "bold.italic")))
(plot_output <- ggplot(lm_output, aes(x = species, y = slope)) +
geom_point(aes(color = species), shape = "diamond", size = 8) +
scale_color_manual(values = bird_palette) +
geom_errorbar(aes(x = species, ymin = slope-slope.error, ymax = slope+slope.error),
width = 0.1,
color = "#637076") +
geom_hline(yintercept = 0) +
labs(title = "Slopes for Linear Model:\n Breeding Success ~ Year") +
xlab("Species") +
ylab("Slope") +
theme_custom() +
theme(legend.position = "none",
panel.grid.major.x = element_blank(),
plot.title = element_text(size = 18, hjust = 0.5),
axis.title = element_text(size = 14),
axis.text = element_text(size = 10, face = "bold.italic")))
(plot_output <- ggplot(lm_output, aes(x = species, y = slope)) +
geom_point(aes(color = species), shape = "diamond", size = 8) +
scale_color_manual(values = bird_palette) +
geom_errorbar(aes(x = species, ymin = slope-slope.error, ymax = slope+slope.error),
width = 0.1) +
geom_hline(yintercept = 0) +
labs(title = "Slopes for Linear Model:\n Breeding Success ~ Year") +
xlab("Species") +
ylab("Slope") +
theme_custom() +
theme(legend.position = "none",
panel.grid.major.x = element_blank(),
plot.title = element_text(size = 18, hjust = 0.5),
axis.title = element_text(size = 14),
axis.text = element_text(size = 10, face = "bold.italic")))
(plot_output <- ggplot(lm_output, aes(x = species, y = slope)) +
geom_point(aes(color = species), shape = "diamond", size = 8) +
scale_color_manual(values = bird_palette) +
geom_errorbar(aes(x = species, ymin = slope-slope.error, ymax = slope+slope.error),
width = 0.1, color = "gray") +
geom_hline(yintercept = 0) +
labs(title = "Slopes for Linear Model:\n Breeding Success ~ Year") +
xlab("Species") +
ylab("Slope") +
theme_custom() +
theme(legend.position = "none",
panel.grid.major.x = element_blank(),
plot.title = element_text(size = 18, hjust = 0.5),
axis.title = element_text(size = 14),
axis.text = element_text(size = 10, face = "bold.italic")))
(plot_output <- ggplot(lm_output, aes(x = species, y = slope)) +
geom_point(aes(color = species), shape = "diamond", size = 8) +
scale_color_manual(values = bird_palette) +
geom_errorbar(aes(x = species, ymin = slope-slope.error, ymax = slope+slope.error),
width = 0.1, color = "#98785D") +
geom_hline(yintercept = 0) +
labs(title = "Slopes for Linear Model:\n Breeding Success ~ Year") +
xlab("Species") +
ylab("Slope") +
theme_custom() +
theme(legend.position = "none",
panel.grid.major.x = element_blank(),
plot.title = element_text(size = 18, hjust = 0.5),
axis.title = element_text(size = 14),
axis.text = element_text(size = 10, face = "bold.italic")))
(plot_output <- ggplot(lm_output, aes(x = species, y = slope)) +
geom_point(aes(color = species), shape = "diamond", size = 8) +
scale_color_manual(values = bird_palette) +
geom_errorbar(aes(x = species, ymin = slope-slope.error, ymax = slope+slope.error),
width = 0.1, color = "#313D3F") +
geom_hline(yintercept = 0) +
labs(title = "Slopes for Linear Model:\n Breeding Success ~ Year") +
xlab("Species") +
ylab("Slope") +
theme_custom() +
theme(legend.position = "none",
panel.grid.major.x = element_blank(),
plot.title = element_text(size = 18, hjust = 0.5),
axis.title = element_text(size = 14),
axis.text = element_text(size = 10, face = "bold.italic")))
colourpicker:::colourPickerAddin()
(plot_output <- ggplot(lm_output, aes(x = species, y = slope)) +
geom_point(aes(color = species), shape = "diamond", size = 8) +
scale_color_manual(values = bird_palette) +
geom_errorbar(aes(x = species, ymin = slope-slope.error, ymax = slope+slope.error),
width = 0.1, color = "##383838") +
geom_hline(yintercept = 0) +
labs(title = "Slopes for Linear Model:\n Breeding Success ~ Year") +
xlab("Species") +
ylab("Slope") +
theme_custom() +
theme(legend.position = "none",
panel.grid.major.x = element_blank(),
plot.title = element_text(size = 18, hjust = 0.5),
axis.title = element_text(size = 14),
axis.text = element_text(size = 10, face = "bold.italic")))
(plot_output <- ggplot(lm_output, aes(x = species, y = slope)) +
geom_point(aes(color = species), shape = "diamond", size = 8) +
scale_color_manual(values = bird_palette) +
geom_errorbar(aes(x = species, ymin = slope-slope.error, ymax = slope+slope.error),
width = 0.1, color = "#383838") +
geom_hline(yintercept = 0) +
labs(title = "Slopes for Linear Model:\n Breeding Success ~ Year") +
xlab("Species") +
ylab("Slope") +
theme_custom() +
theme(legend.position = "none",
panel.grid.major.x = element_blank(),
plot.title = element_text(size = 18, hjust = 0.5),
axis.title = element_text(size = 14),
axis.text = element_text(size = 10, face = "bold.italic")))
(plot_output <- ggplot(lm_output, aes(x = species, y = slope)) +
geom_point(aes(color = species), shape = "diamond", size = 8) +
scale_color_manual(values = bird_palette) +
geom_errorbar(aes(x = species, ymin = slope-slope.error, ymax = slope+slope.error),
width = 0.1, color = "#383838") +
geom_hline(yintercept = 0, color = "red") +
labs(title = "Slopes for Linear Model:\n Breeding Success ~ Year") +
xlab("Species") +
ylab("Slope") +
theme_custom() +
theme(legend.position = "none",
panel.grid.major.x = element_blank(),
plot.title = element_text(size = 18, hjust = 0.5),
axis.title = element_text(size = 14),
axis.text = element_text(size = 10, face = "bold.italic")))
(plot_output <- ggplot(lm_output, aes(x = species, y = slope)) +
geom_hline(yintercept = 0, color = "red") +
geom_errorbar(aes(x = species, ymin = slope-slope.error, ymax = slope+slope.error),
width = 0.1, color = "#383838") +
geom_point(aes(color = species), shape = "diamond", size = 8) +
scale_color_manual(values = bird_palette) +
labs(title = "Slopes for Linear Model:\n Breeding Success ~ Year") +
xlab("Species") +
ylab("Slope") +
theme_custom() +
theme(legend.position = "none",
panel.grid.major.x = element_blank(),
plot.title = element_text(size = 18, hjust = 0.5),
axis.title = element_text(size = 14),
axis.text = element_text(size = 10, face = "bold.italic")))
(plot_output <- ggplot(lm_output, aes(x = species, y = slope)) +
geom_hline(yintercept = 0, color = "red") +
geom_errorbar(aes(x = species, ymin = slope-slope.error, ymax = slope+slope.error),
width = 0.1, color = "#383838") +
geom_point(aes(color = species), shape = "diamond", size = 10) +
scale_color_manual(values = bird_palette) +
labs(title = "Slopes for Linear Model:\n Breeding Success ~ Year") +
xlab("Species") +
ylab("Slope") +
theme_custom() +
theme(legend.position = "none",
panel.grid.major.x = element_blank(),
plot.title = element_text(size = 18, hjust = 0.5),
axis.title = element_text(size = 14),
axis.text = element_text(size = 10, face = "bold.italic")))
(plot_output <- ggplot(lm_output, aes(x = species, y = slope)) +
geom_hline(yintercept = 0, color = "red") +
geom_errorbar(aes(x = species, ymin = slope-slope.error, ymax = slope+slope.error),
width = 0.1, color = "#383838") +
geom_point(aes(color = species), shape = "diamond", size = 9) +
scale_color_manual(values = bird_palette) +
labs(title = "Slopes for Linear Model:\n Breeding Success ~ Year") +
xlab("Species") +
ylab("Slope") +
theme_custom() +
theme(legend.position = "none",
panel.grid.major.x = element_blank(),
plot.title = element_text(size = 18, hjust = 0.5),
axis.title = element_text(size = 14),
axis.text = element_text(size = 10, face = "bold.italic")))
(plot_output <- ggplot(lm_output, aes(x = species, y = slope)) +
geom_hline(yintercept = 0, color = "red") +
geom_errorbar(aes(x = species, ymin = slope-slope.error, ymax = slope+slope.error),
width = 0.1, color = "#383838") +
geom_point(aes(color = species), shape = "diamond", size = 10) +
scale_color_manual(values = bird_palette) +
labs(title = "Slopes for Linear Model:\n Breeding Success ~ Year") +
xlab("Species") +
ylab("Slope") +
theme_custom() +
theme(legend.position = "none",
panel.grid.major.x = element_blank(),
plot.title = element_text(size = 18, hjust = 0.5),
axis.title = element_text(size = 14),
axis.text = element_text(size = 10, face = "bold.italic")))
ggsave("C:\Users\collf\Documents\plot.png", width = 600, heigth = 500)
ggsave("C:/Users/collf/Documents/plot.png", width = 600, heigth = 500)
ggsave("C:/Users/collf/Documents/plot.png", width = 600, heigth = 500, limitsize = F)
ggsave("C:/Users/collf/Documents/plot.png", width = 600, height = 500, limitsize = F)
setwd("C:/Users/collf/Documents/")
ggsave("C:/Users/collf/Documents/plot.png", width = 600, height = 500, limitsize = F)
broom::tidy(lm(x$breedingSuccess ~ I(x$year-1981), data = x))[1:2,1:5]
# Y ahora lapply los modelos + tidy/glance para sacar parametros, error y r2
lm_estimates <- lapply(by_species, function(x){
broom::tidy(lm(x$breedingSuccess ~ I(x$year-1981), data = x))[1:2,1:5]
})
View(lm_estimates)
lm_estimates
lm_goodness <- lapply(by_species, function(x){
broom::glance(lm(x$breedingSuccess ~ I(x$year-1981), data = x))[1,1:2]
})
lm_goodness
mt <- matrix(1:6,3,2)
mt[,-1]
a <- c(3,0,T)
b <- c(4,0,F)
c <- (a|b)
c
x <- c(2L, 3L, 4L, 15L, 23L, 43L)
typeof(median(x))
x <- as.Date("2018-10-01")
x
months(x)
month(x)
v <- 1:Â·
v <- 1:3
names(v) <- c("a", "b", "c")
v[4] <- 4
v
install.packages("igraph")
v1 <- 1:5
v2 <- rep(1,5)
v1+v2
v2 <- v1+v2
v2 <- v1+v2
v2 <- v1+v2
cor(v1,v2)
library(igraph)
g1 <- graph(edges = c(1,2, 2,3, 3,1 ), n = 3)
g1
plot(g1)
a <- c(1,2, 2,3, 3,1 )
g1 <- graprh(c("John", "Jean", "Jim"), )
g1 <- graph(c("John","Jean", "Jean","Jim", "Jim","John"), n = 3, directed = F)
g1 <- graph(c("John","Jean", "Jean","Jim", "Jim","John"), directed = F)
plot(g1)
g1
E(g1)
View(g1)
V(g1)
g1[]
install.packages("enaR")
library("enaR")
version
sessioninfo()
sessionInfo()
## SETUP ----
library(tidyverse)
library(ggthemr)
library(broom)
library(car)
library(multcompView)
ggthemr("fresh")
### SETUP ----
library(tidyverse)
install.packages("installr")
library(installr)
updateR()
### SETUP ----
library(tidyverse)
### SETUP ----
library(tidyverse)
library(ggthemr)
library(multcompView)
library(car)
setwd("D:/collf/Documents/GitHub/TFG-Alberto-Coll")
# Llamamos el script de lectura
#source(file = "./scripts/0_data_lab.R") # Laboratorio
source(file = "./scripts/0_data_home.R") # En casa
datos <- datos %>% filter(cultivo == "Si")
source(file = "./scripts/1_descriptiva_cultivadas.R") # Para tener las funciones de las graficas
library(tidyverse)
library(ggthemr)
library(multcompView)
library(car)
# Directorio en laboratorio: C:/Users/Usuario/Documents/TFG Alberto Coll
# Directorio en portatil: D:/collf/Documents/GitHub/TFG-Alberto-Coll
setwd("D:/collf/Documents/GitHub/TFG-Alberto-Coll")
# Llamamos el script de lectura
#source(file = "./scripts/0_data_lab.R") # Laboratorio
source(file = "./scripts/0_data_home.R") # En casa
datos <- datos %>% filter(cultivo == "Si")
source(file = "./scripts/1_funciones_graficas.R") # Para tener las funciones de las graficas
formulas <- sapply(colnames(datos[c(6:25)]), function(x){as.formula(paste0(x, " ~ playa + corte * tiempo"))}) # En el analisis extendido vamos a ver la interaccion entre corte y tiempo, ademas de incluir el factor playa
modelos <- sapply(formulas, function(x){lm(x, datos)})
n <-  6
for (i in modelos) {
saveRDS(i, file = paste0("./resultados/modelos/modelo", colnames(datos[n]), "_extendido.RDS"))
n <- n + 1
}
# Ahora comprobamos los modelos a ver que tal y en cuales quitamos interaccion (o playa)
sapply(modelos, function(x){
summary(x)
})
formulas_sin <- sapply(colnames(datos[c(6:25)]), function(x){as.formula(paste0(x, " ~ playa + corte + tiempo"))})
formulas_sin[1]
formulas_sin[[1]]
View(formulas_sin)
modelo[[1]]
modelos[[1]]
modelo_sin <- modelos[[1]]
View(modelo_sin)
modelo_sin <- lm(SOD_t ~ playa + corte + tiempo, datos)
m <- anova(modelos[[1]], modelo_sin)
m
summary(m)
m
View(m)
m$`Pr(>F)`[2]
n <- 0
for (variable in colnames(datos[c(6:25)])) {
n <- n + 1
modelo_sin <- lm(formula[n], datos)
#anova(modelos[[n]], modelo_sin)
if (anova(modelos[[n]], modelo_sin)$`Pr(>F)`[2] <= 0.05) {
modelos[n] <- modelo_sin
}
}
n <- 0
for (variable in colnames(datos[c(6:25)])) {
n <- n + 1
modelo_sin <- lm(formula[n], datos)
(anova(modelos[[n]], modelo_sin))
if (anova(modelos[[n]], modelo_sin)$`Pr(>F)`[2] <= 0.05) {
modelos[n] <- modelo_sin
}
}
sapply(modelos, function(x){
shapiro.test(residuals(x))
}) # No hay problemas con normalidad de residuos en ningÃºn caso, lo cual esta genial
n <- 0
for (variable in colnames(datos[c(6:25)])) {
n <- n + 1
modelo_sin <- lm(formulas_sin[n], datos)
(anova(modelos[[n]], modelo_sin))
if (anova(modelos[[n]], modelo_sin)$`Pr(>F)`[2] <= 0.05) {
modelos[n] <- modelo_sin
}
}
n <- 0
for (variable in colnames(datos[c(6:25)])) {
n <- n + 1
modelo_sin <- lm(formulas_sin[n], datos)
(anova(modelos[[n]], modelo_sin))
if (anova(modelos[[n]], modelo_sin)$`Pr(>F)`[2] <= 0.05) {
modelos[n] <- modelo_sin
}
}
n <- 0
for (variable in colnames(datos[c(6:25)])) {
n <- n + 1
modelo_sin <- lm(formulas_sin[n], datos)
print("Se ha ajustado el modelo sin interaccion")
anova(modelos[[n]], modelo_sin)
if (anova(modelos[[n]], modelo_sin)$`Pr(>F)`[2] <= 0.05) {
modelos[n] <- modelo_sin
}
}
n <- 0
for (variable in colnames(datos[c(6:25)])) {
n <- n + 1
modelo_sin <- lm(formulas_sin[[n]], datos)
print("Se ha ajustado el modelo sin interaccion")
anova(modelos[[n]], modelo_sin)
if (anova(modelos[[n]], modelo_sin)$`Pr(>F)`[2] <= 0.05) {
modelos[n] <- modelo_sin
}
}
n <- 0
for (variable in colnames(datos[c(6:25)])) {
n <- n + 1
modelo_sin <- lm(formulas_sin[[n]], datos)
print("Se ha ajustado el modelo sin interaccion")
anova(modelos[[n]], modelo_sin)
if (anova(modelos[[n]], modelo_sin)$`Pr(>F)`[2] <= 0.05) {
modelos[[n]] <- modelo_sin
}
}
n <- 0
for (variable in colnames(datos[c(6:25)])) {
n <- n + 1
modelo_sin <- lm(formulas_sin[[n]], datos)
print("Se ha ajustado el modelo sin interaccion")
likelihood <- anova(modelos[[n]], modelo_sin)
if (likelihood$`Pr(>F)`[2] <= 0.05) {
modelos[[n]] <- modelo_sin
}
}
?else
?if
if()
?if()
?if(){}
?if{}
n <- 0
for (variable in colnames(datos[c(6:25)])) {
n <- n + 1
modelo_sin <- lm(formulas_sin[[n]], datos)
print("Se ha ajustado el modelo sin interaccion")
likelihood <- anova(modelos[[n]], modelo_sin)
print("Se ha hecho el ANOVA")
if (likelihood$`Pr(>F)`[2] > 0.05) {
print("No hay diferencias, sustituimos")
modelos[[n]] <- modelo_sin
}  else {
print("Los modelos son diferentes, nos quedamos con el complejo")
}
}
View(modelo_sin)
modelos[[2]]
sumamry(modelos[[2]])
summary(modelos[[2]])
View(modelos)
formulas <- sapply(colnames(datos[c(6:25)]), function(x){as.formula(paste0(x, " ~ playa + corte * tiempo"))}) # En el analisis extendido vamos a ver la interaccion entre corte y tiempo, ademas de incluir el factor playa
modelos <- sapply(formulas, function(x){lm(x, datos)})
n <- 0
for (variable in colnames(datos[c(6:25)])) {
n <- n + 1
modelo_sin <- lm(formulas_sin[[n]], datos)
print("Se ha ajustado el modelo sin interaccion")
likelihood <- anova(modelos[[n]], modelo_sin)
print("Se ha hecho el ANOVA")
if (likelihood$`Pr(>F)`[2] > 0.05) {
print("No hay diferencias, sustituimos")
modelos[[n]] <- modelo_sin
}  else {
print("Los modelos son diferentes, nos quedamos con el complejo")
}
}
View(modelos)
modelo_sin <- lm(GPx_t ~ playa + corte + tiempo)
modelo_sin <- lm(GPx_t ~ playa + corte + tiempo, datos)
anova(modelos[[3]], modelo_sin)
n <- 0
for (variable in colnames(datos[c(6:25)])) {
n <- n + 1
modelo_sin <- lm(formulas_sin[[n]], datos)
print("Se ha ajustado el modelo sin interaccion")
likelihood <- anova(modelos[[n]], modelo_sin)
print("Se ha hecho el ANOVA")
if (n != 3) {
if (likelihood$`Pr(>F)`[2] > 0.05) {
print("No hay diferencias, sustituimos")
modelos[[n]] <- modelo_sin
}  else {print("Los modelos son diferentes, nos quedamos con el complejo")
}
}
}
modelos <- sapply(formulas, function(x){lm(x, datos)})
n <- 0
for (variable in colnames(datos[c(6:25)])) {
n <- n + 1
modelo_sin <- lm(formulas_sin[[n]], datos)
print("Se ha ajustado el modelo sin interaccion")
likelihood <- anova(modelos[[n]], modelo_sin)
print("Se ha hecho el ANOVA")
if (n != 3) {
if (likelihood$`Pr(>F)`[2] > 0.05) {
print("No hay diferencias, sustituimos")
modelos[[n]] <- modelo_sin
}  else {print("Los modelos son diferentes, nos quedamos con el complejo")
}
}
}
View(modelos)
sapply(modelos, function(x){
shapiro.test(residuals(x))
}) # No hay problemas con normalidad de residuos en ningÃºn caso, lo cual esta genial
sapply(modelos, function(x){
plot(x, which = 3)
title(main = x$terms[[2]])
})
sapply(modelos, function(x){
plot(x, which = 3)
title(main = x$terms[[2]])
})
sapply(modelos, function(x){
shapiro.test(residuals(x))
}) # No hay problemas con normalidad de residuos en ningÃºn caso, lo cual esta genial
modelos[[4]]
plot(modelos[[4])
plot(modelos[[4]])
hist(resid(modelos[[4]]))
summary(modelos[[4]])
lm(log(GR_t) ~ playa + corte + tiempo, datos)
summary(lm(log(GR_t) ~ playa + corte + tiempo, datos))
plot(lm(log(GR_t) ~ playa + corte + tiempo, datos))
plot(lm(log(GR_t) ~ playa + corte + tiempo, datos))
hist(resid(lm(log(GR_t) ~ playa + corte + tiempo, datos)))
hist(resid(lm(sqrt(GR_t) ~ playa + corte + tiempo, datos)))
shapiro.test(residuals(lm(log(GR_t) ~ playa + corte + tiempo, datos)))
shapiro.test(residuals(lm(sqrt(GR_t) ~ playa + corte + tiempo, datos)))
modelos[[4]]
summary(modelos[[4]])
View(datos)
# GR_t no sigue normalidad de residuos, con transformaciÃ³n log se resuelve
modelos[[4]] <- lm(log(GR_t) ~ playa + corte + tiempo, datos)
hist(residuals(modelos[[10]]))
hist(residuals(modelos[[7]]))
hist(residuals(modelos[[17]]))
sapply(modelos, function(x){
plot(x, which = 3)
title(main = x$terms[[2]])
})
install.packages("rmarkdown")
library(rmarkdown)
