datos$sex <- as.factor(datos$sex)
summary(datos$sex)
# Eliminamos filas que contengan NAs
datos <- drop_na(datos)
datos <- datos %>% mutate(sexo_MALE = ifelse(sex == "male", T, F)) %>%
select(-sex)
datos_scl <- scale(datos[,2:6])
# Matriz de distancias
distancia <- dist(datos_scl)
ac1 <- hclust(distancia)
plot(ac1, main = "Clúster sobre especies de pingüinos", cex = 0.7)
# Quitamos dato 283 que no agrupa bien
datos <- datos[-283,]
datos_scl <- scale(datos[,2:6])
distancia <- dist(datos_scl)
ac1 <- hclust(distancia)
plot(ac1, main = "Clúster sobre especies de pingüinos", cex = 0.7)
rect.hclust(ac1, 3)
datos$ac1 <- cutree(ac1, k = 3) # aqui guardar en el dataset resultados del ac1
fviz_nbclust(scale(datos[2:6]), kmeans, "wss")
# Segun este método, deberiamos escoger 4 clusters
set.seed(999)
ac2 <- kmeans(as.matrix(scale(datos[2:6])), 4)
ac2
fviz_cluster(ac2, scale(datos[2:6]), ellipse.type = "norm")
datos_scl <- scale(datos[,2:6])
# Matriz de distancias
distancia <- dist(datos_scl)
ac1 <- hclust(distancia)
6
6
fviz_nbclust(scale(datos[2:6]), kmeans, "wss")
# Segun este método, deberiamos escoger 4 clusters
set.seed(999)
ac2 <- kmeans(as.matrix(scale(datos[2:6])), 5)
ac2
fviz_cluster(ac2, scale(datos[2:6]), ellipse.type = "norm")
ac2 <- kmeans(as.matrix(scale(datos[2:6])), 6)
ac2
fviz_cluster(ac2, scale(datos[2:6]), ellipse.type = "norm")
ac2 <- kmeans(as.matrix(scale(datos[2:6])), 5)
ac2
fviz_cluster(ac2, scale(datos[2:6]), ellipse.type = "norm")
ac2 <- kmeans(as.matrix(scale(datos[2:6])), 3)
ac2
fviz_cluster(ac2, scale(datos[2:6]), ellipse.type = "norm")
ac2 <- kmeans(as.matrix(scale(datos[2:6])), 4)
ac2
fviz_cluster(ac2, scale(datos[2:6]), ellipse.type = "norm")
datos <- select(penguins, species, bill_length_mm, bill_depth_mm, flipper_length_mm, body_mass_g, sex)
### Exploración y limpieza ----
boxplot(datos[2:5]) # No parece que haya datos anómalos a simple vista
# Transformacion de la variable sexo en factor
datos$sex <- as.factor(datos$sex)
summary(datos$sex)
# Eliminamos filas que contengan NAs
datos <- drop_na(datos)
# Obtencion de variables dummy a partir del sexo
datos <- datos %>% mutate(sexo_MALE = ifelse(sex == "male", T, F)) %>%
select(-sex)
### Clustering jerarquico ----
# Escalo las variables numericas y las nuevas variables dummies, omito la variable sexo
fviz_nbclust(scale(datos[2:6]), kmeans, "wss")
# Segun este método, deberiamos escoger 4 clusters
set.seed(999)
ac2 <- kmeans(as.matrix(scale(datos[2:6])), 4)
ac2
fviz_cluster(ac2, scale(datos[2:6]), ellipse.type = "norm")
ac2 <- kmeans(as.matrix(scale(datos[2:6])), 5)
ac2
fviz_cluster(ac2, scale(datos[2:6]), ellipse.type = "norm")
ac2 <- kmeans(as.matrix(scale(datos[2:6])), 6)
ac2
fviz_cluster(ac2, scale(datos[2:6]), ellipse.type = "norm")
datos_scl <- scale(datos[,2:6])
# Matriz de distancias
distancia <- dist(datos_scl)
ac1 <- hclust(distancia)
plot(ac1, main = "Clúster sobre especies de pingüinos", cex = 0.7)
# Quitamos dato 283 que no agrupa bien
datos <- datos[-283,]
datos_scl <- scale(datos[,2:6])
distancia <- dist(datos_scl)
ac1 <- hclust(distancia)
plot(ac1, main = "Clúster sobre especies de pingüinos", cex = 0.7)
rect.hclust(ac1, 3)
datos$ac1 <- cutree(ac1, k = 3) # aqui guardar en el dataset resultados del ac1
fviz_nbclust(scale(datos[2:6]), kmeans, "wss")
# Segun este método, deberiamos escoger 4 clusters
set.seed(999)
ac2 <- kmeans(as.matrix(scale(datos[2:6])), 4)
ac2
fviz_cluster(ac2, scale(datos[2:6]), ellipse.type = "norm")
ac2 <- kmeans(as.matrix(scale(datos[2:6])), 3)
ac2
fviz_cluster(ac2, scale(datos[2:6]), ellipse.type = "norm")
ac2 <- kmeans(as.matrix(scale(datos[2:6])), 5)
ac2
fviz_cluster(ac2, scale(datos[2:6]), ellipse.type = "norm")
ac2 <- kmeans(as.matrix(scale(datos[2:6])), 6)
ac2
fviz_cluster(ac2, scale(datos[2:6]), ellipse.type = "norm")
fviz_nbclust(scale(datos[2:6]), kmeans, "wss")
ac2 <- kmeans(as.matrix(scale(datos[2:6])), 4)
ac2
fviz_cluster(ac2, scale(datos[2:6]), ellipse.type = "norm")
ac2 <- kmeans(as.matrix(scale(datos[2:6])), 5)
ac2
fviz_cluster(ac2, scale(datos[2:6]), ellipse.type = "norm")
(p_ac2 <- fviz_pca_biplot(cp, habillage=as.factor(datos$ac2),
addEllipses=TRUE, ellipse.level=0.95, palette = viridis(5, begin = 0.25, end = 0.8), col.var = "mediumvioletred") + labs(title ="Clustering no jerárquico (k-means)"))
(p_ac2 <- fviz_pca_biplot(cp, habillage=as.factor(datos$ac2),
addEllipses=TRUE, ellipse.level=0.95, palette = viridis(5, begin = 0.25, end = 0.8), col.var = "mediumvioletred") + labs(title ="Clustering no jerárquico (k-means)"))
datos$ac2 <- ac2$cluster
(p_ac2 <- fviz_pca_biplot(cp, habillage=as.factor(datos$ac2),
addEllipses=TRUE, ellipse.level=0.95, palette = viridis(5, begin = 0.25, end = 0.8), col.var = "mediumvioletred") + labs(title ="Clustering no jerárquico (k-means)"))
ac2 <- kmeans(as.matrix(scale(datos[2:6])), 6)
ac2
fviz_cluster(ac2, scale(datos[2:6]), ellipse.type = "norm")
# Segun este método, deberiamos escoger 4 clusters
set.seed(999)
ac2 <- kmeans(as.matrix(scale(datos[2:6])), 6)
ac2
fviz_cluster(ac2, scale(datos[2:6]), ellipse.type = "norm")
# Segun este método, deberiamos escoger 4 clusters
set.seed(99)
ac2 <- kmeans(as.matrix(scale(datos[2:6])), 6)
ac2
fviz_cluster(ac2, scale(datos[2:6]), ellipse.type = "norm")
(p_ac2 <- fviz_pca_biplot(cp, habillage=as.factor(datos$ac2),
addEllipses=TRUE, ellipse.level=0.95, palette = viridis(5, begin = 0.35, end = 0.8), col.var = "mediumvioletred") + labs(title ="Clustering no jerárquico (k-means)"))
(p_sp <- fviz_pca_biplot(cp, habillage=as.factor(datos$species),
addEllipses=TRUE, ellipse.level=0.95, palette = viridis(3, alpha = 0.6, begin = 0.1, end = 0.7, option = "G"), col.var = "mediumvioletred") + labs(title ="Especies de pingüinos"))
(p_ac1 <- fviz_pca_biplot(cp, habillage=as.factor(datos$ac1),
addEllipses=TRUE, ellipse.level=0.95, palette = viridis(3, begin = 0.35, end = 0.8), col.var = "mediumvioletred") + labs(title ="Clustering jerárquico"))
(p_ac2 <- fviz_pca_biplot(cp, habillage=as.factor(datos$ac2),
addEllipses=TRUE, ellipse.level=0.95, palette = viridis(5, begin = 0.35, end = 0.8), col.var = "mediumvioletred") + labs(title ="Clustering no jerárquico (k-means)"))
p_scree <- fviz_nbclust(scale(datos[2:6]), kmeans, "wss")
set.seed(999)
ac2 <- kmeans(as.matrix(scale(datos[2:6])), 5)
p_cluster <- fviz_cluster(ac2, scale(datos[2:6]), ellipse.type = "norm")
datos$ac2 <- ac2$cluster
(p_scree | p_cluster) & theme_minimal()
(p_sp <- fviz_pca_biplot(cp, habillage=as.factor(datos$species),
addEllipses=TRUE, ellipse.level=0.95, palette = viridis(3, alpha = 0.6, begin = 0.1, end = 0.7, option = "G"), col.var = "mediumvioletred") + labs(title ="Especies de pingüinos"))
(p_ac1 <- fviz_pca_biplot(cp, habillage=as.factor(datos$ac1),
addEllipses=TRUE, ellipse.level=0.95, palette = viridis(3, begin = 0.35, end = 0.8), col.var = "mediumvioletred") + labs(title ="Clustering jerárquico"))
(p_ac2 <- fviz_pca_biplot(cp, habillage=as.factor(datos$ac2),
addEllipses=TRUE, ellipse.level=0.95, palette = viridis(5, begin = 0.35, end = 0.8), col.var = "mediumvioletred") + labs(title ="Clustering no jerárquico (k-means)"))
p_scree <- fviz_nbclust(scale(datos[2:6]), kmeans, "wss")
set.seed(999)
ac2 <- kmeans(as.matrix(scale(datos[2:6])), 6)
p_cluster <- fviz_cluster(ac2, scale(datos[2:6]), ellipse.type = "norm")
datos$ac2 <- ac2$cluster
(p_scree | p_cluster) & theme_minimal()
p_scree <- fviz_nbclust(scale(datos[2:6]), kmeans, "wss")
set.seed(999)
ac2 <- kmeans(as.matrix(scale(datos[2:6])), 6)
p_cluster <- fviz_cluster(ac2, scale(datos[2:6]), ellipse.type = "norm")
datos$ac2 <- ac2$cluster
(p_scree | p_cluster) & theme_minimal()
p_scree <- fviz_nbclust(scale(datos[2:6]), kmeans, "wss")
set.seed(99)
ac2 <- kmeans(as.matrix(scale(datos[2:6])), 6)
p_cluster <- fviz_cluster(ac2, scale(datos[2:6]), ellipse.type = "norm")
datos$ac2 <- ac2$cluster
(p_scree | p_cluster) & theme_minimal()
(p_sp <- fviz_pca_biplot(cp, habillage=as.factor(datos$species),
addEllipses=TRUE, ellipse.level=0.95, palette = viridis(3, alpha = 0.6, begin = 0.1, end = 0.7, option = "G"), col.var = "mediumvioletred") + labs(title ="Especies de pingüinos"))
(p_ac1 <- fviz_pca_biplot(cp, habillage=as.factor(datos$ac1),
addEllipses=TRUE, ellipse.level=0.95, palette = viridis(3, begin = 0.35, end = 0.8), col.var = "mediumvioletred") + labs(title ="Clustering jerárquico"))
(p_ac2 <- fviz_pca_biplot(cp, habillage=as.factor(datos$ac2),
addEllipses=TRUE, ellipse.level=0.95, palette = viridis(6, begin = 0.35, end = 0.8), col.var = "mediumvioletred") + labs(title ="Clustering no jerárquico (k-means)"))
### SETUP ----
library(tidyverse)
library(multcompView)
library(car)
library(rstatix)
library(tidyverse)
library(multcompView)
library(car)
library(rstatix)
library(ggpubr)
# En laboratorio
setwd("C:/Users/Usuario/Documents/GitHub/Revision_datos_TFG") # Lab
source(file = "./scripts septiembre 2024-2025/0_data_lab.R")
source(file = "./scripts septiembre 2024-2025/1_funciones_graficas.R")
# Filtrar: solo anemonas cultivadas
data_2 <- filter(datos, cultivo == "cultured")
ggplot(data_2, aes(y = Fbasica_p)) +
geom_boxplot(aes(x = tiempo:corte, color = tiempo:corte), alpha = 0) +
geom_point(aes(x = tiempo:corte, color = tiempo:corte), alpha = 1, size = 2)
# Deteccion de outliers en SOD_t y CAT_t para normalidad de residuos
view(data_2 %>%
group_by(corte:tiempo) %>%
identify_outliers(CAT_t))
# Se eliminan:
data_2$SOD_t[7] <- NA
data_2$SOD_t[3] <- NA
data_2$CAT_t[35] <- NA # La funcion ha identificado otro, pero su eliminacion no afecta a la normalidad de residuos, este si.
data_2$Mielo_p[26] <- NA
# Se eliminan:
data_2$SOD_t[7] <- NA
data_2$SOD_t[3] <- NA
data_2$CAT_t[35] <- NA # La funcion ha identificado otro, pero su eliminacion no afecta a la normalidad de residuos, este si.
data_2$Mielo_p[26] <- NA
data_2$Mielo_t[18] <- NA #Sospechoso, y afecta a normalidad
data_2$Facida_p[30] # sospechoso, outlier no extremo
data_2$Fbasica_p[12] <- NA # outlier extremo
data_2$Fbasica_t[9] <- NA # Afecta a homocedasticidad
data_2$Lisozima_p[33] <- NA # outlier extremo
data_2$Lisozima_p[34] <- NA # outlier extremo
data_2$Lisozima_p[2] <- NA # outlier extremo
# Ajuste de modelos ANOVA con rstatix
modelos <- lapply(colnames(data_2[c(5:31)]), function(x){
anova_test(formula = as.formula(paste0(x, " ~ corte * tiempo")), data_2)})
(anova_results <- reduce(modelos, full_join) %>%
add_column(.before = 1, variable = rep(colnames(data_2[c(5:31)]), each = 3)) %>%
adjust_pvalue(method = "BH"))
# Test de Levenese computa exactamente igual
modelos_levene <- lapply(colnames(data_2[c(5:31)]), function(x){
levene_test(formula = as.formula(paste0(x, " ~ corte * tiempo")), data_2)})
(levene_results <- reduce(modelos_levene, full_join) %>%
add_column(.before = 1, variable = colnames(data_2[c(5:31)])))
modelos_lm <- lapply(colnames(data_2[c(5:31)]), function(x){
lm(formula = as.formula(paste0(x, " ~ corte * tiempo")), data_2)})
modelos_shapiro <- lapply(modelos_lm, function(x){
shapiro_test(residuals(x))})
(shapiro_results <- reduce(modelos_shapiro, full_join) %>%
add_column(.before = 1, parametro = colnames(data_2[c(5:31)])))
View(shapiro_results)
View(levene_results)
View(anova_results)
## SETUP ----
library(tidyverse)
library(ggthemr)
setwd("C:/Users/Usuario/Documents/GitHub/Revision_datos_TFG")
#setwd("D:/collf/Documents/GitHub/Revision_datos_TFG")
source(file = "./scripts septiembre 2024-2025/0_data_lab.R")
barras_tfg <- function(){
ggplot(tabla_summ) +
geom_errorbar(aes(x = tiempo, ymax = mean + se, ymin = mean- se, color = tratamiento), width = 0.3, position = position_dodge(width = 0.9), linewidth = 1) +
geom_col(aes(x = tiempo, y = mean, color = tratamiento, fill = tratamiento), alpha = 0.4, linewidth = 1, position = "dodge2") +
geom_text(aes(x = tiempo, y = mean + se, label = tukey, group = tratamiento), color = "grey5", vjust=-0.8, size = 3.5, fontface = "bold", , position = position_dodge(width = 0.9)) +
ylab(case_when(
i == "proteina_t" | i == "proteina_p"  ~ " protein mg / ml",
i == "MDA_t" | i == "MDA_p" ~ "μM  MDA",
i == "TEAC_t" | i == "TEAC_p"~ "Trolox equivalent μM",
i == "GST_t" | i == "GST_p" ~ "mU / mg  of protein",
i == "DTD_t" | i == "DTD_p" ~ "mU / mg  of protein",
i == "GR_t" | i == "GR_p" ~ "mU / mg  of protein",
i == "GPx_t" | i == "GPx_p" ~ "mU / mg  of protein",
TRUE ~ "U / mg  of protein")) +
xlab("") + # Omitir?
scale_color_manual(values = c("#49AB93","#F59300" ), labels = c("Control", "Dissected") ) +
scale_fill_manual(values = c("#49AB93","#F59300" ), labels = c("Control", "Dissected") ) +
scale_x_discrete(labels = c("t0", "t1")) + #cambiar al apropiado
ylim(c(0, 1.4*(max(tabla_summ$mean) + max(tabla_summ$se)))) +
theme(legend.position = "bottom",
legend.title = element_blank())
}
n <- 1
i <- colnames(data_2[5:31])[[n]]
tabla_summ <- data_2 %>% group_by(corte:tiempo) %>%
get_summary_stats(i, type = "mean_se")
View(tabla_summ)
ggplot(tabla_summ) +
geom_errorbar(aes(x = tiempo, ymax = mean + se, ymin = mean- se, color = tratamiento), width = 0.3, position = position_dodge(width = 0.9), linewidth = 1) +
geom_col(aes(x = tiempo, y = mean, color = tratamiento, fill = tratamiento), alpha = 0.4, linewidth = 1, position = "dodge2") +
geom_text(aes(x = tiempo, y = mean + se, label = tukey, group = tratamiento), color = "grey5", vjust=-0.8, size = 3.5, fontface = "bold", , position = position_dodge(width = 0.9)) +
ylab(case_when(
i == "proteina_t" | i == "proteina_p"  ~ " protein mg / ml",
i == "MDA_t" | i == "MDA_p" ~ "μM  MDA",
i == "TEAC_t" | i == "TEAC_p"~ "Trolox equivalent μM",
i == "GST_t" | i == "GST_p" ~ "mU / mg  of protein",
i == "DTD_t" | i == "DTD_p" ~ "mU / mg  of protein",
i == "GR_t" | i == "GR_p" ~ "mU / mg  of protein",
i == "GPx_t" | i == "GPx_p" ~ "mU / mg  of protein",
TRUE ~ "U / mg  of protein")) +
xlab("") + # Omitir?
scale_color_manual(values = c("#49AB93","#F59300" ), labels = c("Control", "Dissected") ) +
scale_fill_manual(values = c("#49AB93","#F59300" ), labels = c("Control", "Dissected") ) +
scale_x_discrete(labels = c("t0", "t1")) + #cambiar al apropiado
ylim(c(0, 1.4*(max(tabla_summ$mean) + max(tabla_summ$se)))) +
theme(legend.position = "bottom",
legend.title = element_blank())
View(tabla_summ)
tabla_summ %>% separate_wider_delim(`corte:tiempo`, ":", names = c("tratamiento", "tiempo"), cols_remove=F)
tabla_summ <- data_2 %>% group_by(corte:tiempo) %>%
get_summary_stats(i, type = "mean_se") %>%
separate_wider_delim(`corte:tiempo`, ":", names = c("tratamiento", "tiempo"), cols_remove=F)
barras_tfg <- function(){
ggplot(tabla_summ) +
geom_errorbar(aes(x = tiempo, ymax = mean + se, ymin = mean- se, color = tratamiento), width = 0.3, position = position_dodge(width = 0.9), linewidth = 1) +
geom_col(aes(x = tiempo, y = mean, color = tratamiento, fill = tratamiento), alpha = 0.4, linewidth = 1, position = "dodge2") +
geom_text(aes(x = tiempo, y = mean + se, label = tukey, group = tratamiento), color = "grey5", vjust=-0.8, size = 3.5, fontface = "bold", , position = position_dodge(width = 0.9)) +
ylab(case_when(
i == "proteina_t" | i == "proteina_p"  ~ " protein mg / ml",
i == "MDA_t" | i == "MDA_p" ~ "μM  MDA",
i == "TEAC_t" | i == "TEAC_p"~ "Trolox equivalent μM",
i == "GST_t" | i == "GST_p" ~ "mU / mg  of protein",
i == "DTD_t" | i == "DTD_p" ~ "mU / mg  of protein",
i == "GR_t" | i == "GR_p" ~ "mU / mg  of protein",
i == "GPx_t" | i == "GPx_p" ~ "mU / mg  of protein",
TRUE ~ "U / mg  of protein")) +
xlab("") + # Omitir?
scale_color_manual(values = c("#49AB93","#F59300" ), labels = c("Control", "Dissected") ) +
scale_fill_manual(values = c("#49AB93","#F59300" ), labels = c("Control", "Dissected") ) +
scale_x_discrete(labels = c("t0", "t1")) + #cambiar al apropiado
ylim(c(0, 1.4*(max(tabla_summ$mean) + max(tabla_summ$se)))) +
theme(legend.position = "bottom",
legend.title = element_blank())
}
ggplot(tabla_summ) +
geom_errorbar(aes(x = tiempo, ymax = mean + se, ymin = mean- se, color = tratamiento), width = 0.3, position = position_dodge(width = 0.9), linewidth = 1) +
geom_col(aes(x = tiempo, y = mean, color = tratamiento, fill = tratamiento), alpha = 0.4, linewidth = 1, position = "dodge2") +
geom_text(aes(x = tiempo, y = mean + se, label = tukey, group = tratamiento), color = "grey5", vjust=-0.8, size = 3.5, fontface = "bold", , position = position_dodge(width = 0.9)) +
ylab(case_when(
i == "proteina_t" | i == "proteina_p"  ~ " protein mg / ml",
i == "MDA_t" | i == "MDA_p" ~ "μM  MDA",
i == "TEAC_t" | i == "TEAC_p"~ "Trolox equivalent μM",
i == "GST_t" | i == "GST_p" ~ "mU / mg  of protein",
i == "DTD_t" | i == "DTD_p" ~ "mU / mg  of protein",
i == "GR_t" | i == "GR_p" ~ "mU / mg  of protein",
i == "GPx_t" | i == "GPx_p" ~ "mU / mg  of protein",
TRUE ~ "U / mg  of protein")) +
xlab("") + # Omitir?
scale_color_manual(values = c("#49AB93","#F59300" ), labels = c("Control", "Dissected") ) +
scale_fill_manual(values = c("#49AB93","#F59300" ), labels = c("Control", "Dissected") ) +
scale_x_discrete(labels = c("t0", "t1")) + #cambiar al apropiado
ylim(c(0, 1.4*(max(tabla_summ$mean) + max(tabla_summ$se)))) +
theme(legend.position = "bottom",
legend.title = element_blank())
barras_tfg <- function(){
ggplot(tabla_summ) +
geom_errorbar(aes(x = tiempo, ymax = mean + se, ymin = mean- se, color = tratamiento), width = 0.3, position = position_dodge(width = 0.9), linewidth = 1) +
geom_col(aes(x = tiempo, y = mean, color = tratamiento, fill = tratamiento), alpha = 0.4, linewidth = 1, position = "dodge2") +
#geom_text(aes(x = tiempo, y = mean + se, label = tukey, group = tratamiento), color = "grey5", vjust=-0.8, size = 3.5, fontface = "bold", , position = position_dodge(width = 0.9)) +
ylab(case_when(
i == "proteina_t" | i == "proteina_p"  ~ " protein mg / ml",
i == "MDA_t" | i == "MDA_p" ~ "μM  MDA",
i == "TEAC_t" | i == "TEAC_p"~ "Trolox equivalent μM",
i == "GST_t" | i == "GST_p" ~ "mU / mg  of protein",
i == "DTD_t" | i == "DTD_p" ~ "mU / mg  of protein",
i == "GR_t" | i == "GR_p" ~ "mU / mg  of protein",
i == "GPx_t" | i == "GPx_p" ~ "mU / mg  of protein",
TRUE ~ "U / mg  of protein")) +
xlab("") + # Omitir?
scale_color_manual(values = c("#49AB93","#F59300" ), labels = c("Control", "Dissected") ) +
scale_fill_manual(values = c("#49AB93","#F59300" ), labels = c("Control", "Dissected") ) +
scale_x_discrete(labels = c("t0", "t1")) + #cambiar al apropiado
ylim(c(0, 1.4*(max(tabla_summ$mean) + max(tabla_summ$se)))) +
theme(legend.position = "bottom",
legend.title = element_blank())
}
barras_tfg <- function(){
ggplot(tabla_summ) +
geom_errorbar(aes(x = tiempo, ymax = mean + se, ymin = mean- se, color = tratamiento), width = 0.3, position = position_dodge(width = 0.9), linewidth = 1) +
geom_col(aes(x = tiempo, y = mean, color = tratamiento, fill = tratamiento), alpha = 0.4, linewidth = 1, position = "dodge2") +
#geom_text(aes(x = tiempo, y = mean + se, label = tukey, group = tratamiento), color = "grey5", vjust=-0.8, size = 3.5, fontface = "bold", , position = position_dodge(width = 0.9)) +
ylab(case_when(
i == "proteina_t" | i == "proteina_p"  ~ " protein mg / ml",
i == "MDA_t" | i == "MDA_p" ~ "μM  MDA",
i == "TEAC_t" | i == "TEAC_p"~ "Trolox equivalent μM",
i == "GST_t" | i == "GST_p" ~ "mU / mg  of protein",
i == "DTD_t" | i == "DTD_p" ~ "mU / mg  of protein",
i == "GR_t" | i == "GR_p" ~ "mU / mg  of protein",
i == "GPx_t" | i == "GPx_p" ~ "mU / mg  of protein",
TRUE ~ "U / mg  of protein")) +
xlab("") + # Omitir?
scale_color_manual(values = c("#49AB93","#F59300" ), labels = c("Control", "Dissected") ) +
scale_fill_manual(values = c("#49AB93","#F59300" ), labels = c("Control", "Dissected") ) +
scale_x_discrete(labels = c("t0", "t1")) + #cambiar al apropiado
ylim(c(0, 1.4*(max(tabla_summ$mean) + max(tabla_summ$se)))) +
theme(legend.position = "bottom",
legend.title = element_blank())
}
ggplot(tabla_summ) +
geom_errorbar(aes(x = tiempo, ymax = mean + se, ymin = mean- se, color = tratamiento), width = 0.3, position = position_dodge(width = 0.9), linewidth = 1) +
geom_col(aes(x = tiempo, y = mean, color = tratamiento, fill = tratamiento), alpha = 0.4, linewidth = 1, position = "dodge2") +
#geom_text(aes(x = tiempo, y = mean + se, label = tukey, group = tratamiento), color = "grey5", vjust=-0.8, size = 3.5, fontface = "bold", , position = position_dodge(width = 0.9)) +
ylab(case_when(
i == "proteina_t" | i == "proteina_p"  ~ " protein mg / ml",
i == "MDA_t" | i == "MDA_p" ~ "μM  MDA",
i == "TEAC_t" | i == "TEAC_p"~ "Trolox equivalent μM",
i == "GST_t" | i == "GST_p" ~ "mU / mg  of protein",
i == "DTD_t" | i == "DTD_p" ~ "mU / mg  of protein",
i == "GR_t" | i == "GR_p" ~ "mU / mg  of protein",
i == "GPx_t" | i == "GPx_p" ~ "mU / mg  of protein",
TRUE ~ "U / mg  of protein")) +
xlab("") + # Omitir?
scale_color_manual(values = c("#49AB93","#F59300" ), labels = c("Control", "Dissected") ) +
scale_fill_manual(values = c("#49AB93","#F59300" ), labels = c("Control", "Dissected") ) +
scale_x_discrete(labels = c("t0", "t1")) + #cambiar al apropiado
ylim(c(0, 1.4*(max(tabla_summ$mean) + max(tabla_summ$se)))) +
theme(legend.position = "bottom",
legend.title = element_blank())
ggplot(tabla_summ) +
geom_errorbar(aes(x = tiempo, ymax = mean + se, ymin = mean- se, color = tratamiento), width = 0.3, position = position_dodge(width = 0.9), linewidth = 1) +
geom_col(aes(x = tiempo, y = mean, color = tratamiento, fill = tratamiento), alpha = 0.4, width = 0.5 linewidth = 1, position = "dodge2") +
ggplot(tabla_summ) +
geom_errorbar(aes(x = tiempo, ymax = mean + se, ymin = mean- se, color = tratamiento), width = 0.3, position = position_dodge(width = 0.9), linewidth = 1) +
geom_col(aes(x = tiempo, y = mean, color = tratamiento, fill = tratamiento), alpha = 0.4, width = 0.5, linewidth = 1, position = "dodge2") +
#geom_text(aes(x = tiempo, y = mean + se, label = tukey, group = tratamiento), color = "grey5", vjust=-0.8, size = 3.5, fontface = "bold", , position = position_dodge(width = 0.9)) +
ylab(case_when(
i == "proteina_t" | i == "proteina_p"  ~ " protein mg / ml",
i == "MDA_t" | i == "MDA_p" ~ "μM  MDA",
i == "TEAC_t" | i == "TEAC_p"~ "Trolox equivalent μM",
i == "GST_t" | i == "GST_p" ~ "mU / mg  of protein",
i == "DTD_t" | i == "DTD_p" ~ "mU / mg  of protein",
i == "GR_t" | i == "GR_p" ~ "mU / mg  of protein",
i == "GPx_t" | i == "GPx_p" ~ "mU / mg  of protein",
TRUE ~ "U / mg  of protein")) +
xlab("") + # Omitir?
scale_color_manual(values = c("#49AB93","#F59300" ), labels = c("Control", "Dissected") ) +
scale_fill_manual(values = c("#49AB93","#F59300" ), labels = c("Control", "Dissected") ) +
scale_x_discrete(labels = c("t0", "t1")) + #cambiar al apropiado
ylim(c(0, 1.4*(max(tabla_summ$mean) + max(tabla_summ$se)))) +
theme(legend.position = "bottom",
legend.title = element_blank())
ggplot(tabla_summ) +
geom_errorbar(aes(x = tiempo, ymax = mean + se, ymin = mean- se, color = tratamiento), width = 0.3, position = position_dodge(width = 0.9), linewidth = 1) +
geom_col(aes(x = tiempo, y = mean, color = tratamiento, fill = tratamiento), alpha = 0.4, width = 0.8, linewidth = 1, position = "dodge2") +
#geom_text(aes(x = tiempo, y = mean + se, label = tukey, group = tratamiento), color = "grey5", vjust=-0.8, size = 3.5, fontface = "bold", , position = position_dodge(width = 0.9)) +
ylab(case_when(
i == "proteina_t" | i == "proteina_p"  ~ " protein mg / ml",
i == "MDA_t" | i == "MDA_p" ~ "μM  MDA",
i == "TEAC_t" | i == "TEAC_p"~ "Trolox equivalent μM",
i == "GST_t" | i == "GST_p" ~ "mU / mg  of protein",
i == "DTD_t" | i == "DTD_p" ~ "mU / mg  of protein",
i == "GR_t" | i == "GR_p" ~ "mU / mg  of protein",
i == "GPx_t" | i == "GPx_p" ~ "mU / mg  of protein",
TRUE ~ "U / mg  of protein")) +
xlab("") + # Omitir?
scale_color_manual(values = c("#49AB93","#F59300" ), labels = c("Control", "Dissected") ) +
scale_fill_manual(values = c("#49AB93","#F59300" ), labels = c("Control", "Dissected") ) +
scale_x_discrete(labels = c("t0", "t1")) + #cambiar al apropiado
ylim(c(0, 1.4*(max(tabla_summ$mean) + max(tabla_summ$se)))) +
theme(legend.position = "bottom",
legend.title = element_blank())
ggplot(tabla_summ) +
geom_errorbar(aes(x = tiempo, ymax = mean + se, ymin = mean- se, color = tratamiento), width = 0.3, position = "dodge2", linewidth = 1) +
geom_col(aes(x = tiempo, y = mean, color = tratamiento, fill = tratamiento), alpha = 0.4, width = 0.8, linewidth = 1, position = "dodge2") +
#geom_text(aes(x = tiempo, y = mean + se, label = tukey, group = tratamiento), color = "grey5", vjust=-0.8, size = 3.5, fontface = "bold", , position = position_dodge(width = 0.9)) +
ylab(case_when(
i == "proteina_t" | i == "proteina_p"  ~ " protein mg / ml",
i == "MDA_t" | i == "MDA_p" ~ "μM  MDA",
i == "TEAC_t" | i == "TEAC_p"~ "Trolox equivalent μM",
i == "GST_t" | i == "GST_p" ~ "mU / mg  of protein",
i == "DTD_t" | i == "DTD_p" ~ "mU / mg  of protein",
i == "GR_t" | i == "GR_p" ~ "mU / mg  of protein",
i == "GPx_t" | i == "GPx_p" ~ "mU / mg  of protein",
TRUE ~ "U / mg  of protein")) +
xlab("") + # Omitir?
scale_color_manual(values = c("#49AB93","#F59300" ), labels = c("Control", "Dissected") ) +
scale_fill_manual(values = c("#49AB93","#F59300" ), labels = c("Control", "Dissected") ) +
scale_x_discrete(labels = c("t0", "t1")) + #cambiar al apropiado
ylim(c(0, 1.4*(max(tabla_summ$mean) + max(tabla_summ$se)))) +
theme(legend.position = "bottom",
legend.title = element_blank())
ggplot(tabla_summ) +
geom_errorbar(aes(x = tiempo, ymax = mean + se, ymin = mean- se, color = tratamiento), width = 0.8, position = "dodge2", linewidth = 1) +
geom_col(aes(x = tiempo, y = mean, color = tratamiento, fill = tratamiento), alpha = 0.4, width = 0.8, linewidth = 1, position = "dodge2") +
#geom_text(aes(x = tiempo, y = mean + se, label = tukey, group = tratamiento), color = "grey5", vjust=-0.8, size = 3.5, fontface = "bold", , position = position_dodge(width = 0.9)) +
ylab(case_when(
i == "proteina_t" | i == "proteina_p"  ~ " protein mg / ml",
i == "MDA_t" | i == "MDA_p" ~ "μM  MDA",
i == "TEAC_t" | i == "TEAC_p"~ "Trolox equivalent μM",
i == "GST_t" | i == "GST_p" ~ "mU / mg  of protein",
i == "DTD_t" | i == "DTD_p" ~ "mU / mg  of protein",
i == "GR_t" | i == "GR_p" ~ "mU / mg  of protein",
i == "GPx_t" | i == "GPx_p" ~ "mU / mg  of protein",
TRUE ~ "U / mg  of protein")) +
xlab("") + # Omitir?
scale_color_manual(values = c("#49AB93","#F59300" ), labels = c("Control", "Dissected") ) +
scale_fill_manual(values = c("#49AB93","#F59300" ), labels = c("Control", "Dissected") ) +
scale_x_discrete(labels = c("t0", "t1")) + #cambiar al apropiado
ylim(c(0, 1.4*(max(tabla_summ$mean) + max(tabla_summ$se)))) +
theme(legend.position = "bottom",
legend.title = element_blank())
ggplot(tabla_summ) +
geom_errorbar(aes(x = tiempo, ymax = mean + se, ymin = mean- se, color = tratamiento), width = 0.4, position = "dodge2", linewidth = 1) +
geom_col(aes(x = tiempo, y = mean, color = tratamiento, fill = tratamiento), alpha = 0.4, width = 0.8, linewidth = 1, position = "dodge2") +
#geom_text(aes(x = tiempo, y = mean + se, label = tukey, group = tratamiento), color = "grey5", vjust=-0.8, size = 3.5, fontface = "bold", , position = position_dodge(width = 0.9)) +
ylab(case_when(
i == "proteina_t" | i == "proteina_p"  ~ " protein mg / ml",
i == "MDA_t" | i == "MDA_p" ~ "μM  MDA",
i == "TEAC_t" | i == "TEAC_p"~ "Trolox equivalent μM",
i == "GST_t" | i == "GST_p" ~ "mU / mg  of protein",
i == "DTD_t" | i == "DTD_p" ~ "mU / mg  of protein",
i == "GR_t" | i == "GR_p" ~ "mU / mg  of protein",
i == "GPx_t" | i == "GPx_p" ~ "mU / mg  of protein",
TRUE ~ "U / mg  of protein")) +
xlab("") + # Omitir?
scale_color_manual(values = c("#49AB93","#F59300" ), labels = c("Control", "Dissected") ) +
scale_fill_manual(values = c("#49AB93","#F59300" ), labels = c("Control", "Dissected") ) +
scale_x_discrete(labels = c("t0", "t1")) + #cambiar al apropiado
ylim(c(0, 1.4*(max(tabla_summ$mean) + max(tabla_summ$se)))) +
theme(legend.position = "bottom",
legend.title = element_blank())
install.packages("ggpp")
library(ggpp)
library(ggpp)
.rs.restartR()
## SETUP ----
library(tidyverse)
library(ggthemr)
library(ggpp)
?remove.packages(ggpp)
remove.packages(ggpp)
install.packages("gt")
installed.packages()
