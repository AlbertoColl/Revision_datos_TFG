pvalues[2] <= 0.05 & tabla_summ[1,]$mean > tabla_summ[2,]$mean~ c("b", "a", "b", "a"))
print("Interacion is not significant. Simple main effects computed.")
return(letras)}}
else{
print("There is no significative effects")
return(letras)}
}
table_maker <- function(){
t <- anova_results %>% as_tibble() %>%
filter(variable == i) %>%
select(-variable, -DFn, -DFd, -p, -`p<.05`, -ges) %>%
mutate(sign. = case_when(
p.adj <= 0.001 ~ "***",
p.adj <= 0.01 ~ "**",
p.adj <= 0.05 ~ "*",
TRUE ~ "ns")) %>%
gt() %>%
cols_label(
Effect = md("**Effect**"),
`F` = md("**F statistic**"),
p.adj = md("**p value**"),
sign. = md("")) %>%
tab_header(title = md("Two-way ANOVA Table"))
return(t)
}
for (n in c(1:27)) {
i <- colnames(data_2[5:31])[[n]]
tabla_summ <- data_2 %>% group_by(section:time) %>%
get_summary_stats(i, type = "mean_se") %>%
separate_wider_delim(`section:time`, ":", names = c("tratamiento", "time"), cols_remove=F)
if (n != 5){tabla_summ$letras <- posthoc_tree()}
if (n != 5){
(p <- barras_tfg())
#labs(subtitle = case_when(str_detect(i, "_p") == T  ~ "A",                                                 str_detect(i, "_t") == T ~ "B",                                                 TRUE ~ "")))
(t <- table_maker())
(pt <- p/wrap_table(t, panel = "full", space = "fixed"))
ggsave(paste0("./resultados/graficas2025/contabla/", i, ".png"), width = 100, height = 140, units = "mm", dpi = 1000)}
}
rlang::last_trace()
posthoc_tree <- function(){
letras <- c("", "", "", "")
pvalues <- filter(as_tibble(anova_results), variable == i)$p.adj
if (any(pvalues <= 0.05, na.rm = T)){
if (pvalues[3] <= 0.05){
t.results <-data_2 %>%
group_by(time) %>%
t_test(as.formula(paste0(i, " ~ section")), p.adjust.method = "BH")
if(t.results[1,]$p <= 0.05){
letras[c(1,3)] <- case_when(
tabla_summ[1,]$mean < tabla_summ[3,]$mean ~ c("", "*"),
tabla_summ[1,]$mean > tabla_summ[3,]$mean ~ c("*", ""))}
if(t.results[2,]$p <= 0.05){
letras[c(2,4)] <- case_when(
tabla_summ[2,]$mean < tabla_summ[4,]$mean ~ c("", "*"),
tabla_summ[2,]$mean > tabla_summ[4,]$mean ~ c("*", ""))}
#Se pueden añadir tiers con case_when()
print("Interacion is significant. Grouped t-test performed.")
return(letras)
}
else{
print("Interaction is not significative")
letras <- case_when(
pvalues[1] <= 0.05 & pvalues[2] <= 0.05 ~ c("b", "a", "c", "b"),
pvalues[1] <= 0.05 & tabla_summ[1,]$mean < tabla_summ[3,]$mean ~ c("a", "a", "b", "b"),
pvalues[1] <= 0.05 & tabla_summ[1,]$mean > tabla_summ[3,]$mean~ c("b", "b", "a", "a"),
pvalues[2] <= 0.05 & tabla_summ[1,]$mean < tabla_summ[2,]$mean ~ c("a", "b", "a", "b"),
pvalues[2] <= 0.05 & tabla_summ[1,]$mean > tabla_summ[2,]$mean~ c("b", "a", "b", "a"))
print("Interacion is not significant. Simple main effects computed.")
return(letras)}}
else{
print("There is no significative effects")
return(letras)}
}
table_maker <- function(){
t <- anova_results %>% as_tibble() %>%
filter(variable == i) %>%
select(-variable, -DFn, -DFd, -p, -`p<.05`, -ges) %>%
mutate(sign. = case_when(
p.adj <= 0.001 ~ "***",
p.adj <= 0.01 ~ "**",
p.adj <= 0.05 ~ "*",
TRUE ~ "ns")) %>%
gt() %>%
cols_label(
Effect = md("**Effect**"),
`F` = md("**F statistic**"),
p.adj = md("**p value**"),
sign. = md("")) %>%
tab_header(title = md("Two-way ANOVA Table"))
return(t)
}
for (n in c(1:27)) {
i <- colnames(data_2[5:31])[[n]]
tabla_summ <- data_2 %>% group_by(section:time) %>%
get_summary_stats(i, type = "mean_se") %>%
separate_wider_delim(`section:time`, ":", names = c("tratamiento", "time"), cols_remove=F)
if (n != 5){tabla_summ$letras <- posthoc_tree()}
if (n != 5){
(p <- barras_tfg())
#labs(subtitle = case_when(str_detect(i, "_p") == T  ~ "A",                                                 str_detect(i, "_t") == T ~ "B",                                                 TRUE ~ "")))
(t <- table_maker())
(pt <- p/wrap_table(t, panel = "full", space = "fixed"))
ggsave(paste0("./resultados/graficas2025/contabla/", i, ".png"), width = 100, height = 140, units = "mm", dpi = 1000)}
}
p
p +    ylim(c(0, 1.3*(max(tabla_summ$mean) + max(tabla_summ$se)))) +
)
p +    ylim(c(0, 1.3*(max(tabla_summ$mean) + max(tabla_summ$se))))
n <- 1
i <- colnames(data_2[5:31])[[n]]
tabla_summ <- data_2 %>% group_by(section:time) %>%
get_summary_stats(i, type = "mean_se") %>%
separate_wider_delim(`section:time`, ":", names = c("tratamiento", "time"), cols_remove=F)
View(tabla_summ)
if (n != 5){tabla_summ$letras <- posthoc_tree()}
View(data_2)
max(tabla_summ$mean)
1.3*(max(tabla_summ$mean) + max(tabla_summ$se))
limite_max = 1.3*(max(tabla_summ$mean) + max(tabla_summ$se))
limite_t = 1.3*(max(tabla_summ$mean) + max(tabla_summ$se))}
if((n %% 2) == 0) {# Memoria del limite
limite_t = 1.3*(max(tabla_summ$mean) + max(tabla_summ$se))}
if (n != 5){tabla_summ$letras <- posthoc_tree()}
max(2,3)
barras_tfg <- function(){
ggplot(tabla_summ) +
geom_errorbar(aes(x = time, ymax = mean + se, ymin = mean- se, color = tratamiento), width = 0.3, position = position_dodge(width = 0.9), linewidth = 1) +
geom_col(aes(x = time, y = mean, color = tratamiento, fill = tratamiento), alpha = 0.4, linewidth = 1, position = "dodge2") +
geom_text(aes(x = time, y = mean + se, label = letras, group = tratamiento), color = "grey5", vjust=-0.8, size = 3.5, fontface = "bold", , position = position_dodge(width = 0.9)) +
ylab(case_when(
i == "proteina_t" | i == "proteina_p"  ~ " protein mg / ml",
i == "MDA_t" | i == "MDA_p" ~ "μM  MDA",
i == "TEAC_t" | i == "TEAC_p"~ "Trolox equivalent μM",
i == "GST_t" | i == "GST_p" ~ "mU / mg  of protein",
i == "DTD_t" | i == "DTD_p" ~ "mU / mg  of protein",
i == "GR_t" | i == "GR_p" ~ "mU / mg  of protein",
i == "GPx_t" | i == "GPx_p" ~ "mU / mg  of protein",
TRUE ~ "U / mg  of protein")) +
xlab("Time point") + # Omitir?
scale_color_manual(values = c("#49AB93","#F59300" ), labels = c("Control", "Treatment") ) +
scale_fill_manual(values = c("#49AB93","#F59300" ), labels = c("Control", "Treatment") ) +
scale_x_discrete(labels = c("T0", "T1")) + #cambiar al apropiado
theme(legend.position = "top",
legend.title = element_blank())
}
for (n in c(1:27)) {
i <- colnames(data_2[5:31])[[n]]
tabla_summ <- data_2 %>% group_by(section:time) %>%
get_summary_stats(i, type = "mean_se") %>%
separate_wider_delim(`section:time`, ":", names = c("tratamiento", "time"), cols_remove=F)
if((n %% 2) == 0) {# Memoria del limite
limite_t = 1.3*(max(tabla_summ$mean) + max(tabla_summ$se))}
if (n != 5){tabla_summ$letras <- posthoc_tree()}
if (n != 5){
(p <- barras_tfg() +
ylim(c(0,
max(limite_t, 1.3*(max(tabla_summ$mean) + max(tabla_summ$se))))))
#labs(subtitle = case_when(str_detect(i, "_p") == T  ~ "A",                                                 str_detect(i, "_t") == T ~ "B",                                                 TRUE ~ "")))
(t <- table_maker())
(pt <- p/wrap_table(t, panel = "full", space = "fixed"))
ggsave(paste0("./resultados/graficas2025/contabla/", i, ".png"), width = 100, height = 140, units = "mm", dpi = 1000)}
}
for (n in c(1:27)) {
i <- colnames(data_2[5:31])[[n]]
tabla_summ <- data_2 %>% group_by(section:time) %>%
get_summary_stats(i, type = "mean_se") %>%
separate_wider_delim(`section:time`, ":", names = c("tratamiento", "time"), cols_remove=F)
if((n %% 2) != 0) {# Memoria del limite
limite_t = 1.3*(max(tabla_summ$mean) + max(tabla_summ$se))}
if (n != 5){tabla_summ$letras <- posthoc_tree()}
if (n != 5){
(p <- barras_tfg() +
ylim(c(0,
max(limite_t, 1.3*(max(tabla_summ$mean) + max(tabla_summ$se))))))
#labs(subtitle = case_when(str_detect(i, "_p") == T  ~ "A",                                                 str_detect(i, "_t") == T ~ "B",                                                 TRUE ~ "")))
(t <- table_maker())
(pt <- p/wrap_table(t, panel = "full", space = "fixed"))
ggsave(paste0("./resultados/graficas2025/contabla/", i, ".png"), width = 100, height = 140, units = "mm", dpi = 1000)}
}
# ORTIMAR - Objetivo 2
# Analisis efecto del corte
# Febrero 2025 - revision para publicacion
# Vamos a hacer un diseño cuadrado 2x2 dentro de las anemonas cultivadas: la variable corte, que tiene 2 niveles (dissected y control), y la variable tiempo, con niveles 0 y 1. De esa manera esperamos ver el efecto del corte a corto y largo plazo.
# H0: No hay diferencias entre el estado oxidativo de anémonas control y cortadas. H1: Sí existen alguna diferencia.
# H0: No hay interacción entre el corte y el tiempo en cultivo. H1: Hay interacción entre el corte y el tiempo en cultivo.
# H0: No hay diferencias en el estado oxidativo al estar en cultivo a largo plazo. H1: Hay diferencias en el estado oxidativo al estar en cultivo a largo plazo.
# Las muestras son independientes temporalmente ya que no se trata del mismo animal (mismo cestillo?)
# ESTE SCRIPT ES LA VERSION SIN DISCRIMINAR POR PLAYA DE ORIGEN
# Aunque sabemos que siguen tendencias ligeramente diferentes, no tenemos tamaño de muestra para incluirlo como factor en el analisis. La otra opcion es agrupar por playa y hacer los test 3 veces cada uno
# Update 05/3: AL final del script he hecho los analisis separando por playa y no salen muy bonitos, volvemos a perder tamaño de muestra y la interpretacion suele ser identica o muy similar a los resultados agrupando playas.
# Update 13/3: He creado las funciones posthoc tree y table maker para sacar el display de las diferencias significativas y para añadir la tabla ANOVA a la grafica con patchwork. Me falta hacer que ambos ejes y tengan el mismo tamaño en pie y tentaculo, y luego pequeños ajustes de cara a publicacion.
library(tidyverse)
library(multcompView)
library(car)
library(rstatix)
library(gt)
library(patchwork)
### SETUP y filtrado de datos ----
setwd("C:/Users/Usuario/Documents/GitHub/Revision_datos_TFG")
#setwd("D:/collf/Documents/GitHub/Revision_datos_TFG")
source(file = "./scripts septiembre 2024-2025/0_data_lab.R")
#source(file = "./scripts septiembre 2024-2025/0_data_laptop.R")
source(file = "./scripts septiembre 2024-2025/1_funciones_graficas.R")
# Filtrar: solo anemonas cultivadas
data_2 <- filter(datos, cultivo == "cultured")
### Exploracion ----
ggplot(data_2, aes(y = Fbasica_p)) +
geom_boxplot(aes(x = time:section, color = time:section), alpha = 0) +
geom_point(aes(x = time:section, color = time:section), alpha = 1, size = 2)
# Deteccion de outliers en SOD_t y CAT_t para normalidad de residuos
# view(data_2 %>%  group_by(corte:tiempo) %>%  identify_outliers(CAT_t))
# Se eliminan:
data_2$SOD_t[7] <- NA
data_2$SOD_t[3] <- NA
data_2$CAT_t[35] <- NA # La funcion ha identificado otro, pero su eliminacion no afecta a la normalidad de residuos, este si.
data_2$Mielo_p[26] <- NA
data_2$Mielo_t[18] <- NA #Sospechoso, y afecta a normalidad
data_2$Facida_p[30] # sospechoso, outlier no extremo
data_2$Fbasica_p[12] <- NA # outlier extremo
data_2$Fbasica_t[9] <- NA # Afecta a homocedasticidad
data_2$Lisozima_p[33] <- NA # outlier extremo
data_2$Lisozima_p[34] <- NA # outlier extremo
data_2$Lisozima_p[2] <- NA # outlier extremo
### Ajuste de modelos ----
# Si se elimina alguna enzima al final, eliminarla aquí
#data_2 <- data_2 %>%   select(-Lisozima_p, -GPx_t, -GPx_p)
# Ajuste de modelos ANOVA con rstatix
modelos <- lapply(colnames(data_2[c(5:31)]), function(x){
anova_test(formula = as.formula(paste0(x, " ~ section * time")), data_2)})
(anova_results <- reduce(modelos, full_join) %>%
add_column(.before = 1, variable = rep(colnames(data_2[c(5:31)]), each = 3)) %>%
adjust_pvalue(method = "BH"))
# Test de Levene se computa exactamente igual
modelos_levene <- lapply(colnames(data_2[c(5:31)]), function(x){
levene_test(formula = as.formula(paste0(x, " ~ section * time")), data_2)})
(levene_results <- reduce(modelos_levene, full_join) %>%
add_column(.before = 1, variable = colnames(data_2[c(5:31)])))
# Para el test de Shapiro-Wilks se ajustan lm para extraer residuos
modelos_lm <- lapply(colnames(data_2[c(5:31)]), function(x){
lm(formula = as.formula(paste0(x, " ~ section * time")), data_2)})
modelos_shapiro <- lapply(modelos_lm, function(x){
shapiro_test(residuals(x))})
(shapiro_results <- reduce(modelos_shapiro, full_join) %>%
add_column(.before = 1, parametro = colnames(data_2[c(5:31)])))
# Sin filtrar, no se cumple normalidad de residuos en el caso de:
# SOD_t (solucionado), CAT_t (solucionado), Fbasica_p (solucionado), Mielo_p (solucionado), Mielo_t (solucionado), lisozima_p (solucionado)
# No hay homocedasticidad en:
# Fbasica_t (solucionado)
### Construccion de graficas ----
# Funcion post-hoc para asignar asteriscos y letras
posthoc_tree <- function(){
letras <- c("", "", "", "")
pvalues <- filter(as_tibble(anova_results), variable == i)$p.adj
if (any(pvalues <= 0.05, na.rm = T)){
if (pvalues[3] <= 0.05){
t.results <-data_2 %>%
group_by(time) %>%
t_test(as.formula(paste0(i, " ~ section")), p.adjust.method = "BH")
if(t.results[1,]$p <= 0.05){
letras[c(1,3)] <- case_when(
tabla_summ[1,]$mean < tabla_summ[3,]$mean ~ c("", "*"),
tabla_summ[1,]$mean > tabla_summ[3,]$mean ~ c("*", ""))}
if(t.results[2,]$p <= 0.05){
letras[c(2,4)] <- case_when(
tabla_summ[2,]$mean < tabla_summ[4,]$mean ~ c("", "*"),
tabla_summ[2,]$mean > tabla_summ[4,]$mean ~ c("*", ""))}
#Se pueden añadir tiers con case_when()
print("Interacion is significant. Grouped t-test performed.")
return(letras)
}
else{
print("Interaction is not significative")
letras <- case_when(
pvalues[1] <= 0.05 & pvalues[2] <= 0.05 ~ c("b", "a", "c", "b"),
pvalues[1] <= 0.05 & tabla_summ[1,]$mean < tabla_summ[3,]$mean ~ c("a", "a", "b", "b"),
pvalues[1] <= 0.05 & tabla_summ[1,]$mean > tabla_summ[3,]$mean~ c("b", "b", "a", "a"),
pvalues[2] <= 0.05 & tabla_summ[1,]$mean < tabla_summ[2,]$mean ~ c("a", "b", "a", "b"),
pvalues[2] <= 0.05 & tabla_summ[1,]$mean > tabla_summ[2,]$mean~ c("b", "a", "b", "a"))
print("Interacion is not significant. Simple main effects computed.")
return(letras)}}
else{
print("There is no significative effects")
return(letras)}
}
table_maker <- function(){
t <- anova_results %>% as_tibble() %>%
filter(variable == i) %>%
select(-variable, -DFn, -DFd, -p, -`p<.05`, -ges) %>%
mutate(sign. = case_when(
p.adj <= 0.001 ~ "***",
p.adj <= 0.01 ~ "**",
p.adj <= 0.05 ~ "*",
TRUE ~ "ns")) %>%
gt() %>%
cols_label(
Effect = md("**Effect**"),
`F` = md("**F statistic**"),
p.adj = md("**p value**"),
sign. = md("")) %>%
tab_header(title = md("Two-way ANOVA Table"))
return(t)
}
# Bucle de construccion de graficas
for (n in c(1:27)) {
i <- colnames(data_2[5:31])[[n]]
tabla_summ <- data_2 %>% group_by(section:time) %>%
get_summary_stats(i, type = "mean_se") %>%
separate_wider_delim(`section:time`, ":", names = c("tratamiento", "time"), cols_remove=F)
if((n %% 2) != 0) {# Memoria del limite
limite_t = 1.3*(max(tabla_summ$mean) + max(tabla_summ$se))}
if (n != 5){tabla_summ$letras <- posthoc_tree()}
if (n != 5){
(p <- barras_tfg() +
ylim(c(0,
max(limite_t, 1.3*(max(tabla_summ$mean) + max(tabla_summ$se))))))
#labs(subtitle = case_when(str_detect(i, "_p") == T  ~ "A",                                                 str_detect(i, "_t") == T ~ "B",                                                 TRUE ~ "")))
(t <- table_maker())
(pt <- p/wrap_table(t, panel = "full", space = "fixed"))
ggsave(paste0("./resultados/graficas2025/contabla/", i, ".png"), width = 100, height = 140, units = "mm", dpi = 1000)}
}
# ORTIMAR - Objetivo 2
# Analisis efecto del corte
# Febrero 2025 - revision para publicacion
# Vamos a hacer un diseño cuadrado 2x2 dentro de las anemonas cultivadas: la variable corte, que tiene 2 niveles (dissected y control), y la variable tiempo, con niveles 0 y 1. De esa manera esperamos ver el efecto del corte a corto y largo plazo.
# H0: No hay diferencias entre el estado oxidativo de anémonas control y cortadas. H1: Sí existen alguna diferencia.
# H0: No hay interacción entre el corte y el tiempo en cultivo. H1: Hay interacción entre el corte y el tiempo en cultivo.
# H0: No hay diferencias en el estado oxidativo al estar en cultivo a largo plazo. H1: Hay diferencias en el estado oxidativo al estar en cultivo a largo plazo.
# Las muestras son independientes temporalmente ya que no se trata del mismo animal (mismo cestillo?)
# ESTE SCRIPT ES LA VERSION SIN DISCRIMINAR POR PLAYA DE ORIGEN
# Aunque sabemos que siguen tendencias ligeramente diferentes, no tenemos tamaño de muestra para incluirlo como factor en el analisis. La otra opcion es agrupar por playa y hacer los test 3 veces cada uno
# Update 05/3: AL final del script he hecho los analisis separando por playa y no salen muy bonitos, volvemos a perder tamaño de muestra y la interpretacion suele ser identica o muy similar a los resultados agrupando playas.
# Update 13/3: He creado las funciones posthoc tree y table maker para sacar el display de las diferencias significativas y para añadir la tabla ANOVA a la grafica con patchwork. Me falta hacer que ambos ejes y tengan el mismo tamaño en pie y tentaculo, y luego pequeños ajustes de cara a publicacion.
library(tidyverse)
library(multcompView)
library(car)
library(rstatix)
library(gt)
library(patchwork)
### SETUP y filtrado de datos ----
setwd("C:/Users/Usuario/Documents/GitHub/Revision_datos_TFG")
#setwd("D:/collf/Documents/GitHub/Revision_datos_TFG")
source(file = "./scripts septiembre 2024-2025/0_data_lab.R")
#source(file = "./scripts septiembre 2024-2025/0_data_laptop.R")
source(file = "./scripts septiembre 2024-2025/1_funciones_graficas.R")
# Filtrar: solo anemonas cultivadas
data_2 <- filter(datos, cultivo == "cultured")
### Exploracion ----
ggplot(data_2, aes(y = Fbasica_p)) +
geom_boxplot(aes(x = time:section, color = time:section), alpha = 0) +
geom_point(aes(x = time:section, color = time:section), alpha = 1, size = 2)
# Deteccion de outliers en SOD_t y CAT_t para normalidad de residuos
# view(data_2 %>%  group_by(corte:tiempo) %>%  identify_outliers(CAT_t))
# Se eliminan:
data_2$SOD_t[7] <- NA
data_2$SOD_t[3] <- NA
data_2$CAT_t[35] <- NA # La funcion ha identificado otro, pero su eliminacion no afecta a la normalidad de residuos, este si.
data_2$Mielo_p[26] <- NA
data_2$Mielo_t[18] <- NA #Sospechoso, y afecta a normalidad
data_2$Facida_p[30] # sospechoso, outlier no extremo
data_2$Fbasica_p[12] <- NA # outlier extremo
data_2$Fbasica_t[9] <- NA # Afecta a homocedasticidad
data_2$Lisozima_p[33] <- NA # outlier extremo
data_2$Lisozima_p[34] <- NA # outlier extremo
data_2$Lisozima_p[2] <- NA # outlier extremo
### Ajuste de modelos ----
# Si se elimina alguna enzima al final, eliminarla aquí
#data_2 <- data_2 %>%   select(-Lisozima_p, -GPx_t, -GPx_p)
# Ajuste de modelos ANOVA con rstatix
modelos <- lapply(colnames(data_2[c(5:31)]), function(x){
anova_test(formula = as.formula(paste0(x, " ~ section * time")), data_2)})
(anova_results <- reduce(modelos, full_join) %>%
add_column(.before = 1, variable = rep(colnames(data_2[c(5:31)]), each = 3)) %>%
adjust_pvalue(method = "BH"))
# Test de Levene se computa exactamente igual
modelos_levene <- lapply(colnames(data_2[c(5:31)]), function(x){
levene_test(formula = as.formula(paste0(x, " ~ section * time")), data_2)})
(levene_results <- reduce(modelos_levene, full_join) %>%
add_column(.before = 1, variable = colnames(data_2[c(5:31)])))
# Para el test de Shapiro-Wilks se ajustan lm para extraer residuos
modelos_lm <- lapply(colnames(data_2[c(5:31)]), function(x){
lm(formula = as.formula(paste0(x, " ~ section * time")), data_2)})
modelos_shapiro <- lapply(modelos_lm, function(x){
shapiro_test(residuals(x))})
(shapiro_results <- reduce(modelos_shapiro, full_join) %>%
add_column(.before = 1, parametro = colnames(data_2[c(5:31)])))
# Sin filtrar, no se cumple normalidad de residuos en el caso de:
# SOD_t (solucionado), CAT_t (solucionado), Fbasica_p (solucionado), Mielo_p (solucionado), Mielo_t (solucionado), lisozima_p (solucionado)
# No hay homocedasticidad en:
# Fbasica_t (solucionado)
### Construccion de graficas ----
# Funcion post-hoc para asignar asteriscos y letras
posthoc_tree <- function(){
letras <- c("", "", "", "")
pvalues <- filter(as_tibble(anova_results), variable == i)$p.adj
if (any(pvalues <= 0.05, na.rm = T)){
if (pvalues[3] <= 0.05){
t.results <-data_2 %>%
group_by(time) %>%
t_test(as.formula(paste0(i, " ~ section")), p.adjust.method = "BH")
if(t.results[1,]$p <= 0.05){
letras[c(1,3)] <- case_when(
tabla_summ[1,]$mean < tabla_summ[3,]$mean ~ c("", "*"),
tabla_summ[1,]$mean > tabla_summ[3,]$mean ~ c("*", ""))}
if(t.results[2,]$p <= 0.05){
letras[c(2,4)] <- case_when(
tabla_summ[2,]$mean < tabla_summ[4,]$mean ~ c("", "*"),
tabla_summ[2,]$mean > tabla_summ[4,]$mean ~ c("*", ""))}
#Se pueden añadir tiers con case_when()
print("Interacion is significant. Grouped t-test performed.")
return(letras)
}
else{
print("Interaction is not significative")
letras <- case_when(
pvalues[1] <= 0.05 & pvalues[2] <= 0.05 ~ c("b", "a", "c", "b"),
pvalues[1] <= 0.05 & tabla_summ[1,]$mean < tabla_summ[3,]$mean ~ c("a", "a", "b", "b"),
pvalues[1] <= 0.05 & tabla_summ[1,]$mean > tabla_summ[3,]$mean~ c("b", "b", "a", "a"),
pvalues[2] <= 0.05 & tabla_summ[1,]$mean < tabla_summ[2,]$mean ~ c("a", "b", "a", "b"),
pvalues[2] <= 0.05 & tabla_summ[1,]$mean > tabla_summ[2,]$mean~ c("b", "a", "b", "a"))
print("Interacion is not significant. Simple main effects computed.")
return(letras)}}
else{
print("There is no significative effects")
return(letras)}
}
table_maker <- function(){
t <- anova_results %>% as_tibble() %>%
filter(variable == i) %>%
select(-variable, -DFn, -DFd, -p, -`p<.05`, -ges) %>%
mutate(sign. = case_when(
p.adj <= 0.001 ~ "***",
p.adj <= 0.01 ~ "**",
p.adj <= 0.05 ~ "*",
TRUE ~ "ns")) %>%
gt() %>%
cols_label(
Effect = md("**Effect**"),
`F` = md("**F statistic**"),
p.adj = md("**p value**"),
sign. = md("")) %>%
tab_header(title = md("Two-way ANOVA Table"))
return(t)
}
# Bucle de construccion de graficas
for (n in c(1:27)) {
i <- colnames(data_2[5:31])[[n]]
tabla_summ <- data_2 %>% group_by(section:time) %>%
get_summary_stats(i, type = "mean_se") %>%
separate_wider_delim(`section:time`, ":", names = c("tratamiento", "time"), cols_remove=F)
if((n %% 2) != 0) {# Memoria del limite
limite_t = 1.3*(max(tabla_summ$mean) + max(tabla_summ$se))}
if (n != 5){tabla_summ$letras <- posthoc_tree()}
if (n != 5){
(p <- barras_tfg() +
ylim(c(0,
max(limite_t, 1.3*(max(tabla_summ$mean) + max(tabla_summ$se))))))
#labs(subtitle = case_when(str_detect(i, "_p") == T  ~ "A",                                                 str_detect(i, "_t") == T ~ "B",                                                 TRUE ~ "")))
(t <- table_maker())
(pt <- p/wrap_table(t, panel = "full", space = "fixed"))
ggsave(paste0("./resultados/graficas2025/contabla/", i, ".png"), width = 100, height = 140, units = "mm", dpi = 1000)}
}
for (n in c(1:27)) {
i <- colnames(data_2[5:31])[[n]]
tabla_summ <- data_2 %>% group_by(section:time) %>%
get_summary_stats(i, type = "mean_se") %>%
separate_wider_delim(`section:time`, ":", names = c("tratamiento", "time"), cols_remove=F)
if((n %% 2) != 0) {# Memoria del limite
limite_t = 1.3*(max(tabla_summ$mean) + max(tabla_summ$se))}
if (n != 5){tabla_summ$letras <- posthoc_tree()}
if (n != 5){
(p <- barras_tfg() +
ylim(c(0,
max(limite_t, 1.15*(max(tabla_summ$mean) + max(tabla_summ$se))))))
#labs(subtitle = case_when(str_detect(i, "_p") == T  ~ "A",                                                 str_detect(i, "_t") == T ~ "B",                                                 TRUE ~ "")))
(t <- table_maker())
(pt <- p/wrap_table(t, panel = "full", space = "fixed"))
ggsave(paste0("./resultados/graficas2025/contabla/", i, ".png"), width = 100, height = 140, units = "mm", dpi = 1000)}
}
for (n in c(1:27)) {
i <- colnames(data_2[5:31])[[n]]
tabla_summ <- data_2 %>% group_by(section:time) %>%
get_summary_stats(i, type = "mean_se") %>%
separate_wider_delim(`section:time`, ":", names = c("tratamiento", "time"), cols_remove=F)
if((n %% 2) != 0) {# Memoria del limite
limite_t = 1.3*(max(tabla_summ$mean) + max(tabla_summ$se))}
if (n != 5){tabla_summ$letras <- posthoc_tree()}
if (n != 5){
(p <- barras_tfg() +
ylim(c(0,
max(limite_t, 1.1*(max(tabla_summ$mean) + max(tabla_summ$se))))))
#labs(subtitle = case_when(str_detect(i, "_p") == T  ~ "A",                                                 str_detect(i, "_t") == T ~ "B",                                                 TRUE ~ "")))
(t <- table_maker())
(pt <- p/wrap_table(t, panel = "full", space = "fixed"))
ggsave(paste0("./resultados/graficas2025/contabla/", i, ".png"), width = 100, height = 140, units = "mm", dpi = 1000)}
}
for (n in c(1:27)) {
i <- colnames(data_2[5:31])[[n]]
tabla_summ <- data_2 %>% group_by(section:time) %>%
get_summary_stats(i, type = "mean_se") %>%
separate_wider_delim(`section:time`, ":", names = c("tratamiento", "time"), cols_remove=F)
if((n %% 2) != 0) {# Memoria del limite
limite_t = 1.3*(max(tabla_summ$mean) + max(tabla_summ$se))}
if (n != 5){tabla_summ$letras <- posthoc_tree()}
if (n != 5){
(p <- barras_tfg() +
ylim(c(0,
max(limite_t, (max(tabla_summ$mean) + max(tabla_summ$se))))))
#labs(subtitle = case_when(str_detect(i, "_p") == T  ~ "A",                                                 str_detect(i, "_t") == T ~ "B",                                                 TRUE ~ "")))
(t <- table_maker())
(pt <- p/wrap_table(t, panel = "full", space = "fixed"))
ggsave(paste0("./resultados/graficas2025/contabla/", i, ".png"), width = 100, height = 140, units = "mm", dpi = 1000)}
}
